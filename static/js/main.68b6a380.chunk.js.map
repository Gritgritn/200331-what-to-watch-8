{"version":3,"sources":["constants.ts","components/film-card-background/film-card-background.tsx","components/logo/logo.tsx","services/adapters.ts","services/token.ts","store/app/app-actions.ts","store/authorization/authorization-actions.ts","store/films/films-actions.ts","store/authorization/authorization-selectors.ts","styles/styles.ts","components/user-block/user-block.tsx","store/authorization/authorization-api-actions.ts","components/film-card-poster/film-card-poster.tsx","store/films/films-api-actions.ts","components/film-card-buttons/film-card-buttons.tsx","components/page-title/page-title.tsx","components/page-header/page-header.tsx","components/promo-film-card/promo-film-card.tsx","components/page-content/page-content.tsx","components/catalog/catalog.tsx","components/catalog-genres-list/catalog-genres-list.tsx","components/small-film-card-video/small-film-card-video.tsx","components/small-film-card-preview/small-film-card-preview.tsx","components/small-film-card/small-film-card.tsx","components/catalog-films-list/catalog-films-list.tsx","components/catalog-more-button/catalog-more-button.tsx","components/page-footer/page-footer.tsx","components/info-screen/info-screen.tsx","components/loading-screen/loading-screen.tsx","components/not-found-screen/not-found-screen.tsx","store/filter/filter-selectors.ts","store/films/films-selectors.ts","store/genres/genres-selectors.ts","store/filter/filter-actions.ts","utils/fetched-data.ts","components/main-screen/main-screen.tsx","store/comments/comments-actions.ts","hooks/use-id-param.ts","components/film-card-tabs/film-card-tabs.tsx","utils/films.ts","components/film-card-overview/film-card-overview.tsx","utils/date.ts","components/film-card-details/film-card-details.tsx","components/review/review.tsx","components/film-card-reviews/film-card-reviews.tsx","utils/common.ts","components/full-film-card/full-film-card.tsx","store/comments/comments-selectors.ts","components/film-screen/film-screen.tsx","store/comments/comments-api-actions.ts","components/player-screen/player-screen.tsx","hooks/use-video.ts","components/login-form/login-form.tsx","components/login-screen/login-screen.tsx","components/my-list-screen/my-list-screen.tsx","components/breadcrumbs/breadcrumbs.tsx","components/add-review-form/add-review-form.tsx","components/add-review-screen/add-review-screen.tsx","components/custom-route/custom-route.tsx","components/app/app.tsx","browser-history.ts","store/middleware/redirect.ts","store/films/films-initial-state.ts","store/films/films-reducer.ts","store/authorization/authorization-initial-state.ts","store/authorization/authorization-reducer.ts","store/comments/comments-initial-state.ts","store/comments/comments-reducer.ts","store/filter/filter-initial-state.ts","store/filter/filter-reducer.ts","store/root-reducer.ts","index.tsx","services/api.ts"],"names":["ALL_GENRES","NUMERIC_REGEX","LATIN_REGEX","AUTH_TOKEN_KEY_NAME","EMAIL_REGEX","AppRoute","id","generatePath","FavoriteStatus","FilmCardBackgroundSize","AuthorizationStatus","FilmCardTab","Overview","Details","Reviews","RatingDescription","Bad","Normal","Good","VeryGood","Awesome","ratingDescriptionToLowerLimit","CustomRouteType","ActionType","APIRoute","newStatus","FetchStatus","Rating","ReviewContent","FilmCardBackground","src","alt","className","BASE_CLASS","Logo","IsFooter","fullClassName","classNames","to","adaptFilmToClient","serverFilm","clientFilm","Object","entries","forEach","key","value","camelCase","actors","starring","adaptAuthorizationInfoToClient","serverAuthorizationInfo","authInfo","adaptCommentToClient","serverComment","date","dayjs","toDate","dropToken","localStorage","removeItem","redirectToRoute","createAction","route","payload","setAuthorizationStatus","status","setAuthorizationErrorMessage","errorMessage","setAuthorizationInfo","info","clearAuthorizationErrorMessage","setAllFilms","allFilms","setAllFilmsFetchStatus","setPromoFilm","promoFilm","setPromoFilmFetchStatus","setFavoriteFilms","favoriteFilms","setFavoriteFilmsFetchStatus","setSimilarFilms","similarFilms","setSimilarFilmsFetchStatus","setCurrentFilm","currentFilm","setCurrentFilmFetchStatus","getAuthorizationStatus","authorization","getUserAvatar","avatarUrl","getAuthorizationErrorMessage","INFO_SCREEN_STYLES","position","width","height","display","flexDirection","justifyContent","alignItems","LOADER_STYLES","margin","background","shapeRendering","USER_BLOCK_STYLES","minHeight","UserBlock","authorizationStatus","useSelector","userAvatar","dispatch","useDispatch","logout","_getState","api","a","delete","toast","error","style","onClick","BASE_CLASS_NAME","FilmCardPoster","size","sizedClassName","getCurrentFilm","filmId","get","data","FilmCardButtons","film","isFilmFavorite","withAddReview","type","viewBox","xlinkHref","newFavoriteStatus","post","films","PageTitle","children","IsHidden","PageHeader","PromoFilmCard","backgroundImage","name","posterImage","genre","released","isFavorite","memo","PageContent","Catalog","title","hiddenTitle","likeThis","fullTitleClassName","CatalogGenresList","genres","activeGenre","setActiveGenre","handleCatalogItemClick","evt","preventDefault","newActiveGenre","currentTarget","dataset","map","href","SmallFilmCardVideo","poster","autoPlay","muted","objectFit","SmallFilmCardPreview","SmallFilmCard","timer","useRef","useState","isHovered","setHovered","isDelayedHovered","setDelayedHovered","clearTimer","current","clearTimeout","useEffect","setTimeout","onMouseEnter","onMouseLeave","color","previewVideoLink","previewImage","CatalogFilmsList","CatalogMoreButton","PageFooter","InfoScreen","LoadingScreen","xmlns","xmlnsXlink","preserveAspectRatio","x","y","fill","attributeName","dur","repeatCount","calcMode","keyTimes","keySplines","values","begin","NotFoundScreen","textDecoration","getFilter","filter","getAllFilmsData","getPromoFilmData","getSimilarFilmsData","getFavoriteFilmsData","getCurrentFilmData","getAllFilmsStatus","getPromoFilmStatus","getSimilarFilmsStatus","getFavoriteFilmsStatus","getCurrentFilmStatus","getFilteredFilms","createSelector","getGenres","Set","add","Array","from","slice","setFilter","isFetchIdle","isFetchNotReady","isFetchError","isFetchSuccess","MainScreen","allFilmsStatus","promoFilmsStatus","filteredFilms","fetchAllFilms","serverFilms","fetchPromoFilm","serverPromoFilm","onFilterChange","useCallback","newFilter","onMoreButtonClick","setCurrentPage","prevCount","currentPage","catalogFilms","isMoreButtonVisible","length","setCurrentComments","currentComments","setCurrentCommentsFetchStatus","setNewCommentFetchStatus","useIdParam","useParams","Error","parsedId","Number","isNaN","BASE_TAB_CLASS_NAME","FilmCardTabs","location","useLocation","tab","fullItemClassName","hash","path","pathname","upperFirst","formatRating","rating","formattedRating","String","replace","formatOverviewActors","formattedActors","join","getRatingDescription","keys","reverse","FilmCardOverview","scoresCount","description","director","extend","duration","formatHumanizedDate","format","FilmCardDetails","runtime","actor","index","array","isNotLast","runTime","Review","comment","user","dateTime","FilmCardReviews","items","middleIndex","Math","ceil","splitArrayInTwo","comments","leftReviews","rightReviews","FullFilmCard","parsedTab","some","currentTab","filmCardTabToContent","backgroundColor","getCurrentCommentsData","getCurrentCommentsStatus","isNewCommentsLoading","newComment","FilmScreen","filmStatus","commentsStatus","similarFilmsStatus","screenStatus","setScreenStatus","screenStatusRef","fetchCurrentFilm","fetchCurrentComments","serverComments","getCurrentComments","fetchSimilarFilms","getSimilarFilms","PlayerScreen","filmStatusRef","ref","isReady","setReady","isPlay","setPlay","setDuration","percentage","setPercentage","elapsedTime","setElapsedTime","play","node","receivedDuration","round","pause","togglePlay","prevIsPlay","onLoadedData","onTimeUpdate","currentPercentage","currentTime","currentElapsedTime","onPlay","onPause","requestFullScreen","requestFullscreen","useVideo","videoRef","isVideoPlay","isVideoReady","videoDuration","videoPercentage","videoElapsedTime","toggleVideoPlay","onVideoPlay","onVideoPause","onVideoLoadedData","onVideoTimeUpdate","requestVideoFullScreen","togglerLeftPosition","playButtonIcon","timeValueTextContent","formatElapsedTime","videoLink","max","left","disabled","INITIAL_FORM_DATA","email","password","INITIAL_FORM_DIRTINESS","LoginForm","serverErrorMessage","formData","setFormData","formDirtiness","setFormDirtiness","emailValidityMessage","useMemo","test","toLowerCase","passwordValidityMessage","includes","validityMessage","trim","login","token","authorizationInfo","setItem","message","postLogin","onInputBlur","target","onInputChange","action","onSubmit","placeholder","onChange","onBlur","htmlFor","LoginScreen","MyListScreen","favoriteFilmsStatus","fetchFavoriteFilms","Breadcrumbs","AddReviewForm","setRating","setComment","isFormValid","setFormValidity","isFormLoading","createReview","postComment","isRatingValid","validateReviewRating","isReviewContentValid","content","handleRatingChange","item","inputId","IsChecked","checked","AddReviewScreen","CustomRoute","props","App","exact","browserHistory","createBrowserHistory","redirect","_store","next","push","filmsInitialState","filmsReducer","createReducer","builder","addCase","state","authorizationInitialState","authorizationReducer","build","commentsInitialState","commentsReducer","filterInitialState","filterReducer","rootReducer","combineReducers","unauthorizedCallback","axios","create","baseURL","timeout","interceptors","response","use","Promise","reject","request","config","getItem","getToken","headers","createAPI","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","thunk","extraArgument","concat","ReactDOM","render","StrictMode","history","document","getElementById"],"mappings":"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","file":"static/js/main.68b6a380.chunk.js","sourcesContent":["import { generatePath } from 'react-router';\nimport { FavoriteStatusType } from './types/types';\n\nconst MAX_GENRES_COUNT = 9;\n\nconst ALL_GENRES = 'All genres';\n\nconst CATALOG_INITIAL_PAGE = 1;\n\nconst CATALOG_PAGE_SIZE = 8;\n\nconst MAX_SIMILAR_FILMS_COUNT = 4;\n\nconst NUMERIC_REGEX = /\\d/;\n\nconst LATIN_REGEX = /[A-za-z]/;\n\nconst AUTH_TOKEN_KEY_NAME = 'wtw-token';\n\nconst MIN_PASSWORD_LENGTH = 2;\n\nconst EMPTY_SPACE = ' ';\n\nconst MAX_OVERVIEW_ACTORS_COUNT = 4;\n\nconst LINE_BREAK = '\\n';\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst UNKNOWN_ACTION = {\n  type: 'UNKNOWN_ACTION',\n} as const;\n\nconst AppRoute = {\n  Root: () => '/',\n  Login: () => '/login',\n  MyList: () => '/mylist',\n  Film: (id:string | number = ':id') => generatePath('/films/:id', { id: id}),\n  AddReview: (id:string | number = ':id') => generatePath('/films/:id/review', { id: id}),\n  Player: (id:string | number = ':id') => generatePath('/player/:id', { id: id}),\n  NotFound: () => '/404',\n} as const;\n\nconst FavoriteStatus = {\n  Favorite: 1,\n  NotFavorite: 0,\n} as const;\n\nconst FilmCardBackgroundSize = {\n  Big: 'BIG',\n  Small: 'SMALL',\n} as const;\n\nconst AuthorizationStatus = {\n  Auth: 'AUTH',\n  NotAuth: 'NOT_AUTH',\n  Unknown: 'UNKNOWN',\n} as const;\n\nconst FilmCardTab = {\n  Overview: 'overview',\n  Details: 'details',\n  Reviews: 'reviews',\n} as const;\n\nconst RatingDescription = {\n  Bad: 'Bad',\n  Normal: 'Normal',\n  Good: 'Good',\n  VeryGood: 'Very Good',\n  Awesome: 'Awesome',\n} as const;\n\n\nconst ratingDescriptionToLowerLimit: {\n  [key in keyof typeof RatingDescription]: number\n} = {\n  Bad: 0,\n  Normal: 3,\n  Good: 5,\n  VeryGood: 8,\n  Awesome: 10,\n};\n\nconst CustomRouteType = {\n  Guest: 'GUEST',\n  Private: 'PRIVATE',\n} as const;\n\nconst ActionType = {\n  SetFilter: 'filter/setFilter',\n  SetAuthorizationStatus: 'authorization/setStatus',\n  SetAuthorizationInfo: 'authorization/setInfo',\n  SetAllFilms: 'allFilms/setData',\n  SetAllFilmsFetchStatus: 'allFilms/setFetchStatus',\n  SetPromoFilm: 'promoFilm/setData',\n  SetPromoFilmFetchStatus: 'promoFilm/setFetchStatus',\n  SetFavoriteFilms: 'favoriteFilms/setData',\n  SetFavoriteFilmsFetchStatus: 'favoriteFilms/setFetchStatus',\n  SetSimilarFilms: 'similarFilms/setData',\n  SetSimilarFilmsFetchStatus: 'similarFilms/setFetchStatus',\n  SetCurrentFilm: 'currentFilm/setData',\n  SetCurrentFilmFetchStatus: 'currentFilm/setFetchStatus',\n  SetAuthorizationError: 'authorization/setError',\n  SetCurrentComments: 'currentComments/setData',\n  SetCurrentCommentsFetchStatus: 'currentComments/setFetchStatus',\n  SetNewCommentFetchStatus: 'newComment/setFetchStatus',\n  Redirect: 'app/redirect',\n} as const;\n\nconst APIRoute = {\n  Films: () => '/films',\n  PromoFilm: () => '/promo',\n  Film: (id:string | number) => `/films/${id}`,\n  SimilarFilms: (id:string | number) => `/films/${id}/similar`,\n  FavoriteFilms: () => '/favorite',\n  FavoriteFilm: (id:string | number, newStatus: FavoriteStatusType) => `/favorite/${id}/${newStatus}`,\n  Comments: (id:string | number) => `/comments/${id}`,\n  Login: () => '/login',\n  Logout: () => '/logout',\n} as const;\n\nconst FetchStatus = {\n  Idle: 'IDLE',\n  Loading: 'LOADING',\n  Succeeded: 'SUCCEEDED',\n  Failed: 'FAILED',\n} as const;\n\nconst Rating = {\n  MinValue: 1,\n  MaxValue: 10,\n} as const;\n\nconst ReviewContent = {\n  MinLength: 50,\n  MaxLength: 400,\n} as const;\n\nexport { LINE_BREAK, UNKNOWN_ACTION, MAX_OVERVIEW_ACTORS_COUNT, FavoriteStatus, Rating, ReviewContent, AUTH_TOKEN_KEY_NAME, MIN_PASSWORD_LENGTH, EMPTY_SPACE, EMAIL_REGEX, APIRoute, FetchStatus, MAX_SIMILAR_FILMS_COUNT, CATALOG_INITIAL_PAGE, CATALOG_PAGE_SIZE, MAX_GENRES_COUNT, ALL_GENRES, ActionType, FilmCardBackgroundSize, AppRoute, AuthorizationStatus, FilmCardTab, ratingDescriptionToLowerLimit, RatingDescription, CustomRouteType, NUMERIC_REGEX, LATIN_REGEX };\n","type FilmCardBackgroundProps = {\n  src: string,\n  alt: string,\n}\n\nfunction FilmCardBackground({src, alt}: FilmCardBackgroundProps): JSX.Element {\n  return (\n    <div className=\"film-card__bg\">\n      <img src={src} alt={alt} />\n    </div>\n  );\n}\n\nexport default FilmCardBackground;\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype LogoProps = {\n  IsFooter?: boolean,\n}\n\nconst BASE_CLASS = 'logo__link';\n\nfunction Logo({ IsFooter }: LogoProps): JSX.Element {\n  const fullClassName = classNames(BASE_CLASS, { [`${BASE_CLASS}--light`]: IsFooter });\n\n  return (\n    <div className=\"logo\">\n      <Link to=\"/\" className={fullClassName} data-testid=\"logo-link\">\n        <span className=\"logo__letter logo__letter--1\">W</span>\n        <span className=\"logo__letter logo__letter--2\">T</span>\n        <span className=\"logo__letter logo__letter--3\">W</span>\n      </Link>\n    </div>\n  );\n}\n\nexport default Logo;\n","import camelCase from 'lodash/camelCase';\nimport { ServerFilm, Film, ServerAuthorizationInfo, AuthorizationInfo, Comment, ServerCommentGet } from '../types/types';\nimport dayjs from 'dayjs';\n\nconst adaptFilmToClient = (serverFilm: ServerFilm): Film => {\n  const clientFilm: {\n    [key: string]: number | string | string[] | boolean,\n  } = {};\n\n  Object.entries(serverFilm).forEach(([key, value]) => {\n    clientFilm[camelCase(key)] = value;\n  });\n\n  clientFilm.actors = serverFilm.starring;\n  delete clientFilm.starring;\n\n  return clientFilm as Film;\n};\n\nconst adaptAuthorizationInfoToClient = (serverAuthorizationInfo: ServerAuthorizationInfo): AuthorizationInfo => {\n  const authInfo: {\n    [key: string]: number | string;\n  } = {};\n\n  Object.entries(serverAuthorizationInfo).forEach(([key, value]) => {\n    authInfo[camelCase(key)] = value;\n  });\n\n\n  return authInfo as AuthorizationInfo;\n};\n\nconst adaptCommentToClient = (serverComment: ServerCommentGet): Comment => ({\n  ...serverComment,\n  date: dayjs(serverComment.date).toDate(),\n} as Comment);\n\nexport { adaptFilmToClient, adaptAuthorizationInfoToClient, adaptCommentToClient };\n","import { AUTH_TOKEN_KEY_NAME } from '../constants';\nimport { Token } from '../types/types';\n\nconst getToken = (): Token => {\n  const token = localStorage.getItem(AUTH_TOKEN_KEY_NAME);\n  return token ?? '';\n};\n\nconst saveToken = (token: Token): void => {\n  localStorage.setItem(AUTH_TOKEN_KEY_NAME, token);\n};\n\nconst dropToken = (): void => {\n  localStorage.removeItem(AUTH_TOKEN_KEY_NAME);\n};\n\nexport {getToken, saveToken, dropToken};\n","import { createAction } from '@reduxjs/toolkit';\nimport { ActionType } from '../../constants';\n\nconst redirectToRoute = createAction(ActionType.Redirect, (route: string) => ({\n  payload: {\n    route,\n  },\n}));\n\nexport { redirectToRoute };\n","import { createAction } from '@reduxjs/toolkit';\nimport { ActionType, AuthorizationStatus } from '../../constants';\nimport { AuthorizationInfo, ValuesOf } from '../../types/types';\n\nconst setAuthorizationStatus = createAction(ActionType.SetAuthorizationStatus, (status: ValuesOf<typeof AuthorizationStatus>) => ({\n  payload: {\n    status,\n  },\n}));\n\nconst setAuthorizationErrorMessage = createAction(ActionType.SetAuthorizationError, (errorMessage: string) => ({\n  payload: {\n    errorMessage,\n  },\n}));\n\nconst setAuthorizationInfo = createAction(ActionType.SetAuthorizationInfo, (info: AuthorizationInfo | null) => ({\n  payload: {\n    info,\n  },\n}));\n\nconst clearAuthorizationErrorMessage = createAction(ActionType.SetAuthorizationError, () => ({\n  payload: {\n    errorMessage: '',\n  },\n}));\n\nexport { setAuthorizationStatus, setAuthorizationErrorMessage, setAuthorizationInfo, clearAuthorizationErrorMessage };\n","import { createAction } from '@reduxjs/toolkit';\nimport { ActionType } from '../../constants';\nimport { FetchStatusType, Film } from '../../types/types';\n\nconst setAllFilms = createAction(ActionType.SetAllFilms, (allFilms: Film[] | null) => ({\n  payload: {\n    allFilms,\n  },\n}));\n\nconst setAllFilmsFetchStatus = createAction(ActionType.SetAllFilmsFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nconst setPromoFilm = createAction(ActionType.SetPromoFilm, (promoFilm: Film | null) => ({\n  payload: {\n    promoFilm,\n  },\n}));\n\nconst setPromoFilmFetchStatus = createAction(ActionType.SetPromoFilmFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nconst setFavoriteFilms = createAction(ActionType.SetFavoriteFilms, (favoriteFilms: Film[] | null) => ({\n  payload: {\n    favoriteFilms,\n  },\n}));\n\nconst setFavoriteFilmsFetchStatus = createAction(ActionType.SetFavoriteFilmsFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nconst setSimilarFilms = createAction(ActionType.SetSimilarFilms, (similarFilms: Film[] | null) => ({\n  payload: {\n    similarFilms,\n  },\n}));\n\nconst setSimilarFilmsFetchStatus = createAction(ActionType.SetSimilarFilmsFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nconst setCurrentFilm = createAction(ActionType.SetCurrentFilm, (currentFilm: Film | null) => ({\n  payload: {\n    currentFilm,\n  },\n}));\n\nconst setCurrentFilmFetchStatus = createAction(ActionType.SetCurrentFilmFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nexport { setAllFilms, setAllFilmsFetchStatus, setPromoFilm, setPromoFilmFetchStatus, setFavoriteFilms, setCurrentFilmFetchStatus, setCurrentFilm, setSimilarFilmsFetchStatus, setSimilarFilms, setFavoriteFilmsFetchStatus };\n","import { AuthorizationStatus } from '../../constants';\nimport { AuthorizationInfo, State, ValuesOf } from '../../types/types';\n\nconst getAuhorizationInfo = ({ authorization }: State): AuthorizationInfo | null => authorization.info;\n\nconst getAuthorizationStatus  = ({ authorization }: State): ValuesOf<typeof AuthorizationStatus> => authorization.status;\n\nconst getUserAvatar = ({ authorization }: State): string | undefined => authorization.info?.avatarUrl;\n\nconst getAuthorizationErrorMessage = ({ authorization }: State): string => authorization.errorMessage;\n\nexport { getAuhorizationInfo, getAuthorizationStatus, getUserAvatar, getAuthorizationErrorMessage };\n","import { CSSProperties } from 'react';\n\nconst INFO_SCREEN_STYLES: CSSProperties = {\n  position: 'fixed',\n  width: '100vw',\n  height: '100vh',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst LOADER_STYLES: CSSProperties = {\n  margin: 'auto',\n  background: 'transparent',\n  display: 'block',\n  shapeRendering: 'auto',\n};\n\nconst USER_BLOCK_STYLES: CSSProperties = {\n  minHeight: 63,\n};\n\nexport { INFO_SCREEN_STYLES, LOADER_STYLES, USER_BLOCK_STYLES };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { AppRoute, AuthorizationStatus } from '../../constants';\nimport { deleteLogout } from '../../store/authorization/authorization-api-actions';\nimport { getAuthorizationStatus, getUserAvatar } from '../../store/authorization/authorization-selectors';\nimport { USER_BLOCK_STYLES } from '../../styles/styles';\n\nfunction UserBlock():JSX.Element {\n  const authorizationStatus = useSelector(getAuthorizationStatus);\n  const userAvatar = useSelector(getUserAvatar);\n  const dispatch = useDispatch();\n  const logout = () => {\n    dispatch(deleteLogout());\n  };\n  return (\n    <ul className=\"user-block\" style={USER_BLOCK_STYLES}>\n      { authorizationStatus  === AuthorizationStatus.Auth ?\n        (\n          <>\n            <li className=\"user-block__item\">\n              <Link to={AppRoute.MyList()}>\n                <div className=\"user-block__avatar\">\n                  <img src={userAvatar} alt=\"User avatar\" width=\"63\" height=\"63\" />\n                </div>\n              </Link>\n            </li>\n            <li className=\"user-block__item\">\n              <span className=\"user-block__link\" onClick={() => logout()}>Sign out</span>\n            </li>\n          </>\n        )  : (\n          <li className=\"user-block__item\">\n            <Link to={AppRoute.Login()} className=\"user-block__link\">Sign In</Link>\n          </li>\n        )}\n    </ul>\n  );\n}\n\nexport default UserBlock;\n","import toast from 'react-hot-toast';\nimport { APIRoute, AppRoute, AuthorizationStatus, FetchStatus } from '../../constants';\nimport { adaptAuthorizationInfoToClient } from '../../services/adapters';\nimport { dropToken, saveToken } from '../../services/token';\nimport { ServerAuthorizationInfo, ThunkActionResult, Login } from '../../types/types';\nimport { redirectToRoute } from '../app/app-actions';\nimport { clearAuthorizationErrorMessage, setAuthorizationErrorMessage, setAuthorizationInfo, setAuthorizationStatus } from './authorization-actions';\nimport { setCurrentFilmFetchStatus, setPromoFilmFetchStatus } from '../films/films-actions';\n\nconst getLogin = (): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    try {\n      const { data: serverAuthorizationInfo } =\n        await api.get<ServerAuthorizationInfo>(APIRoute.Login());\n\n      const authorizationInfo = adaptAuthorizationInfoToClient(serverAuthorizationInfo);\n\n      dispatch(setAuthorizationInfo(authorizationInfo));\n      dispatch(setAuthorizationStatus(AuthorizationStatus.Auth));\n\n    } catch {\n      dropToken();\n      dispatch(setAuthorizationStatus(AuthorizationStatus.NotAuth));\n    }\n  };\n\nconst postLogin = (user: Login): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(clearAuthorizationErrorMessage());\n\n    try {\n      const { data: serverAuthorizationInfo } =\n        await api.post<ServerAuthorizationInfo>(APIRoute.Login(), user);\n\n      const authorizationInfo = adaptAuthorizationInfoToClient(serverAuthorizationInfo);\n\n      saveToken(authorizationInfo.token);\n      dispatch(redirectToRoute(AppRoute.Root()));\n      dispatch(setAuthorizationInfo(authorizationInfo));\n      dispatch(setAuthorizationStatus(AuthorizationStatus.Auth));\n\n    } catch (error) {\n      dispatch(setAuthorizationErrorMessage((error as Error).message));\n    }\n  };\n\nconst deleteLogout = (): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    try {\n      await api.delete(APIRoute.Logout());\n      dropToken();\n      dispatch(setAuthorizationInfo(null));\n      dispatch(setAuthorizationStatus(AuthorizationStatus.NotAuth));\n      dispatch(setPromoFilmFetchStatus(FetchStatus.Idle));\n      dispatch(setCurrentFilmFetchStatus(FetchStatus.Idle));\n    } catch {\n      toast.error('Logout is falied');\n    }\n  };\n\nexport { deleteLogout, postLogin, getLogin };\n","import {FilmCardBackgroundSize} from '../../constants';\n\ntype FilmCardBackgroundProps = {\n  src: string,\n  alt: string,\n  size?: string,\n}\n\nconst BASE_CLASS_NAME = 'film-card__poster';\n\nfunction FilmCardPoster({src, alt, size}: FilmCardBackgroundProps): JSX.Element {\n  let sizedClassName = '';\n\n  if (size === FilmCardBackgroundSize.Small) {\n    sizedClassName = `${BASE_CLASS_NAME}--small`;\n  }\n\n  if (size === FilmCardBackgroundSize.Big) {\n    sizedClassName = `${BASE_CLASS_NAME}--big`;\n  }\n\n  const fullClassName = `${BASE_CLASS_NAME} ${sizedClassName}`;\n\n  return (\n    <div className={fullClassName} data-testid=\"film-card-poster-container\">\n      <img src={src} alt={alt} width=\"218\" height=\"327\" data-testid=\"film-card-poster\" />\n    </div>\n  );\n}\n\nexport default FilmCardPoster;\n","import { APIRoute, FetchStatus } from '../../constants';\nimport { adaptFilmToClient } from '../../services/adapters';\nimport { FavoriteStatusType, ServerFilm, ThunkActionResult } from '../../types/types';\nimport { setAllFilms, setAllFilmsFetchStatus, setCurrentFilm, setCurrentFilmFetchStatus, setFavoriteFilms, setFavoriteFilmsFetchStatus, setPromoFilmFetchStatus, setPromoFilm, setSimilarFilms, setSimilarFilmsFetchStatus } from './films-actions';\nimport toast from 'react-hot-toast';\n\nconst getAllFilms = (): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setAllFilmsFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverFilms } = await api.get<ServerFilm[]>(APIRoute.Films());\n      const films = serverFilms.map((serverFilm) => adaptFilmToClient(serverFilm));\n\n      dispatch(setAllFilms(films));\n      dispatch(setAllFilmsFetchStatus(FetchStatus.Succeeded));\n\n    } catch (error) {\n      dispatch(setAllFilmsFetchStatus(FetchStatus.Failed));\n    }\n  };\n\nconst getPromoFilm = (): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setPromoFilmFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverPromoFilm } = await api.get<ServerFilm>(APIRoute.PromoFilm());\n      const promoFilm = adaptFilmToClient(serverPromoFilm);\n\n      dispatch(setPromoFilm(promoFilm));\n      dispatch(setPromoFilmFetchStatus(FetchStatus.Succeeded));\n\n    } catch (error) {\n      dispatch(setPromoFilmFetchStatus(FetchStatus.Failed));\n    }\n  };\n\nconst postFavoriteFilm = (id:string | number, newStatus: FavoriteStatusType): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    try {\n      const { data: serverFilm } = await api.post<ServerFilm>(APIRoute.FavoriteFilm(id, newStatus));\n      const film = adaptFilmToClient(serverFilm);\n\n      if (_getState().films.promoFilm.data?.id === film.id) {\n        dispatch(setPromoFilm(film));\n      }\n\n      if (_getState().films.currentFilm.data?.id === film.id) {\n        dispatch(setCurrentFilm(film));\n      }\n    } catch (error) {\n      toast.error('Favorite status was not changed');\n    }\n  };\n\n\nconst getFavoriteFilms = (): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setFavoriteFilmsFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverFilms } = await api.get<ServerFilm[]>(APIRoute.FavoriteFilms());\n      const films = serverFilms.map((serverFilm) => adaptFilmToClient(serverFilm));\n\n      dispatch(setFavoriteFilms(films));\n      dispatch(setFavoriteFilmsFetchStatus(FetchStatus.Succeeded));\n\n    } catch (error) {\n      dispatch(setFavoriteFilmsFetchStatus(FetchStatus.Failed));\n    }\n  };\n\nconst getSimilarFilms = (id: number): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setSimilarFilmsFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverFilms } = await api.get<ServerFilm[]>(APIRoute.SimilarFilms(id));\n      const similarFilms = serverFilms.map((serverFilm) => adaptFilmToClient(serverFilm));\n\n      dispatch(setSimilarFilms(similarFilms));\n      dispatch(setSimilarFilmsFetchStatus(FetchStatus.Succeeded));\n\n    } catch (error) {\n      dispatch(setSimilarFilmsFetchStatus(FetchStatus.Failed));\n    }\n  };\n\nconst getCurrentFilm = (filmId: number): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setCurrentFilmFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverFilm } = await api.get<ServerFilm>(APIRoute.Film(filmId));\n      const currentFilm = adaptFilmToClient(serverFilm);\n\n      dispatch(setCurrentFilm(currentFilm));\n      dispatch(setCurrentFilmFetchStatus(FetchStatus.Succeeded));\n\n    } catch (error) {\n      dispatch(setCurrentFilmFetchStatus(FetchStatus.Failed));\n    }\n  };\n\nexport { getCurrentFilm, getSimilarFilms, getFavoriteFilms, postFavoriteFilm, getPromoFilm, getAllFilms };\n","import type { Film } from '../../types/types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { AppRoute, AuthorizationStatus, FavoriteStatus } from '../../constants';\nimport { getAuthorizationStatus } from '../../store/authorization/authorization-selectors';\nimport { postFavoriteFilm } from '../../store/films/films-api-actions';\n\ntype FilmCardButtonsProps = {\n  isFilmFavorite: boolean,\n  withAddReview?: boolean,\n  film: Film\n}\n\nfunction FilmCardButtons({film, isFilmFavorite, withAddReview}: FilmCardButtonsProps): JSX.Element {\n  const authorizationStatus = useSelector(getAuthorizationStatus);\n  const dispatch = useDispatch();\n\n  const onFavoriteButtonClick = () => {\n    const newFavoriteStatus = isFilmFavorite ? FavoriteStatus.NotFavorite : FavoriteStatus.Favorite;\n    dispatch(postFavoriteFilm(film.id, newFavoriteStatus));\n  };\n\n  return (\n    <div className=\"film-card__buttons\">\n      <Link to={AppRoute.Player(film.id)} className=\"btn btn--play film-card__button\" type=\"button\">\n        <svg viewBox=\"0 0 19 19\" width=\"19\" height=\"19\">\n          <use xlinkHref=\"#play-s\"></use>\n        </svg>\n        <span>Play</span>\n      </Link>\n      <button className=\"btn btn--list film-card__button\" type=\"button\" onClick={onFavoriteButtonClick}>\n        <svg viewBox=\"0 0 19 20\" width=\"19\" height=\"20\">\n          <use xlinkHref={isFilmFavorite ? '#in-list' : '#add'}></use>\n        </svg>\n        <span>My list</span>\n      </button>\n      {\n        withAddReview && authorizationStatus  === AuthorizationStatus.Auth &&\n        <Link to={AppRoute.AddReview(film.id)} className=\"btn film-card__button\" type=\"button\">\n          <span>Add review</span>\n        </Link>\n      }\n    </div>\n  );\n}\n\nexport default FilmCardButtons;\n","import classNames from 'classnames';\n\ntype PageTitleProps = {\n  IsHidden?: boolean\n  children: React.ReactNode,\n  className?: string,\n}\n\nfunction PageTitle({className, children, IsHidden = false}:PageTitleProps): JSX.Element {\n  return <h1 className={classNames(IsHidden ? 'visually-hidden' : 'page-title', className)} data-testid=\"page-title\">{children}</h1>;\n}\n\nexport default PageTitle;\n","import classNames from 'classnames';\n\nconst BASE_CLASS_NAME = 'page-header';\n\ntype PageHeaderProps = {\n  children: React.ReactNode,\n  className?: string,\n}\n\nfunction PageHeader({className, children}: PageHeaderProps): JSX.Element {\n  return <header className={classNames(BASE_CLASS_NAME, className)} data-testid=\"page-header\">{children}</header>;\n}\n\nexport default PageHeader;\n","import { memo } from 'react';\nimport type { Film  } from '../../types/types';\nimport FilmCardBackground from '../film-card-background/film-card-background';\nimport Logo from '../logo/logo';\nimport UserBlock from '../user-block/user-block';\nimport FilmCardPoster from '../film-card-poster/film-card-poster';\nimport FilmCardButtons from '../film-card-buttons/film-card-buttons';\nimport PageTitle from '../page-title/page-title';\nimport PageHeader from '../page-header/page-header';\n\ntype PromoFilmCardProps = {\n  film: Film,\n}\n\nfunction PromoFilmCard({film}: PromoFilmCardProps): JSX.Element {\n  return (\n    <section className=\"film-card\">\n      <FilmCardBackground src={film.backgroundImage} alt={film.name} />\n\n      <PageTitle IsHidden>WTW</PageTitle>\n\n      <PageHeader className=\"film-card__head\">\n        <Logo />\n        <UserBlock />\n      </PageHeader>\n\n      <div className=\"film-card__wrap\">\n        <div className=\"film-card__info\">\n          <FilmCardPoster src={film.posterImage} alt={`${film.name} poster`} />\n\n          <div className=\"film-card__desc\">\n            <h2 className=\"film-card__title\" data-testid=\"film-card-title\">{film.name}</h2>\n            <p className=\"film-card__meta\">\n              <span className=\"film-card__genre\" data-testid=\"film-card-genre\">{film.genre}</span>\n              <span className=\"film-card__year\" data-testid=\"film-card-year\">{film.released}</span>\n            </p>\n            <FilmCardButtons isFilmFavorite={film.isFavorite} film={film} />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default memo(PromoFilmCard);\n","type PageContentProps = {\n  children: React.ReactNode,\n}\n\nfunction PageContent({children}:PageContentProps): JSX.Element {\n  return <div className=\"page-content\">{children}</div>;\n}\n\nexport default PageContent;\n","import { ReactNode } from 'react';\nimport classNames from 'classnames';\n\nconst BASE_CLASS_NAME = 'catalog';\nconst BASE_TITLE_CLASS_NAME = 'catalog__title';\n\ntype CatalogProps = {\n  title?: string,\n  hiddenTitle?: string,\n  likeThis?: boolean,\n  children: ReactNode,\n}\n\nfunction Catalog({title, hiddenTitle, likeThis, children}: CatalogProps): JSX.Element {\n  const fullClassName = classNames(BASE_CLASS_NAME, { [`${BASE_CLASS_NAME}--like-this`]: likeThis });\n  const fullTitleClassName = classNames(BASE_TITLE_CLASS_NAME, { 'visually-hidden': !title });\n\n  return (\n    <section className={fullClassName} data-testid=\"catalog-container\">\n      <h2 className={fullTitleClassName} data-testid=\"catalog-title\">{hiddenTitle || title}</h2>\n      {children}\n    </section>\n  );\n}\n\nexport default Catalog;\n","import classNames from 'classnames';\n\ntype CatalogGenresListProps = {\n  genres: string[],\n  activeGenre: string,\n  setActiveGenre: (genre: string) => void,\n}\n\nconst BASE_CLASS_NAME = 'catalog__genres-item';\n\n\nfunction CatalogGenresList({genres, activeGenre, setActiveGenre}: CatalogGenresListProps): JSX.Element {\n  const handleCatalogItemClick = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.preventDefault();\n    const newActiveGenre = evt.currentTarget.dataset.value as string;\n    setActiveGenre(newActiveGenre);\n  };\n  return (\n    <ul className=\"catalog__genres-list\">\n      {\n        genres.map((genre) => {\n          const fullClassName = classNames(BASE_CLASS_NAME, { [`${BASE_CLASS_NAME}--active`]: genre === activeGenre });\n\n          return (\n            <li key={genre} className={fullClassName} data-testid={genre === activeGenre ? 'genre-tab-item-active' : 'genre-tab-item'}>\n              <a href=\"#genre\" className=\"catalog__genres-link\" data-value={genre} onClick={handleCatalogItemClick} data-testid=\"genre-tab-link\">{genre}</a>\n            </li>\n          );\n        },\n        )\n      }\n    </ul>\n  );\n}\n\nexport default CatalogGenresList;\n","import type { SmallFilmCardVideoProps } from '../../types/types';\n\nfunction SmallFilmCardVideo({src, poster}: SmallFilmCardVideoProps): JSX.Element {\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n      <video src={src} autoPlay muted poster={poster} width=\"280\" height=\"175\" style={{objectFit: 'cover'}} data-testid=\"small-film-card-video-preview\" />\n    </div>\n  );\n}\n\nexport default SmallFilmCardVideo;\n","type SmallFilmCardPreviewProps = {\n  src: string,\n  alt?: string,\n}\n\nfunction SmallFilmCardPreview({src, alt = ''}: SmallFilmCardPreviewProps): JSX.Element {\n  return (\n    <div className=\"small-film-card__image\">\n      <img src={src} alt={alt} width=\"280\" height=\"175\" data-testid=\"small-film-card-image-preview\" />\n    </div>\n  );\n}\n\nexport default SmallFilmCardPreview;\n","import { Link } from 'react-router-dom';\nimport type { Film } from '../../types/types';\nimport { AppRoute } from '../../constants';\nimport { useEffect, useState, useRef, memo } from 'react';\nimport SmallFilmCardVideo from '../small-film-card-video/small-film-card-video';\nimport classNames from 'classnames';\nimport SmallFilmCardPreview from '../small-film-card-preview/small-film-card-preview';\n\nconst BASE_CLASS_NAME = 'small-film-card';\n\nconst HOVER_DELAY = 1000;\n\ntype SmallFilmCardProps = {\n  film: Film,\n  className?: string;\n}\n\nfunction SmallFilmCard({film, className}: SmallFilmCardProps): JSX.Element {\n  const timer = useRef<NodeJS.Timeout | null>(null);\n  const [ isHovered, setHovered ] = useState(false);\n  const [ isDelayedHovered, setDelayedHovered ] = useState(false);\n\n  const clearTimer = () => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n      timer.current = null;\n    }\n  };\n\n  useEffect(() => {\n    clearTimer();\n\n\n    timer.current = setTimeout(() => {\n      if (!isHovered && isDelayedHovered) {\n        setDelayedHovered(false);\n\n        return;\n      }\n\n      setDelayedHovered(true);\n    }, HOVER_DELAY);\n\n    return clearTimer;\n  }, [isDelayedHovered, isHovered]);\n\n  return (\n    <article className={classNames(BASE_CLASS_NAME, className)} onMouseEnter={() => setHovered(true)} onMouseLeave={() => setHovered(false)} data-testid=\"small-film-card\">\n      <Link to={AppRoute.Film(film.id)} style={{ color: 'inherit'}}>\n        { isHovered ?\n          (<SmallFilmCardVideo src={film.previewVideoLink} poster={film.previewImage} />)\n          :\n          (<SmallFilmCardPreview src={film.previewImage} alt={film.name} />)}\n        <h3 className=\"small-film-card__title\" data-testid=\"small-card-title\">\n          <span className=\"small-film-card__link\">{film.name}</span>\n        </h3>\n      </Link>\n    </article>\n  );\n}\nexport default memo(SmallFilmCard);\n","import type { Film } from '../../types/types';\nimport SmallFilmCard from '../small-film-card/small-film-card';\n\ntype CatalogFilmsListProps  = {\n  films: Film[],\n}\n\nfunction CatalogFilmsList ({films}: CatalogFilmsListProps ): JSX.Element {\n  return (\n    <div className=\"catalog__films-list\">\n      {films.map((film) => <SmallFilmCard key={film.id} film={film} className=\"catalog__films-card\" />)}\n    </div>\n  );\n}\n\nexport default CatalogFilmsList ;\n","type CatalogMoreButtonProps = {\n  onClick: () => void;\n}\n\nfunction CatalogMoreButton({onClick}: CatalogMoreButtonProps): JSX.Element {\n  return (\n    <div className=\"catalog__more\">\n      <button className=\"catalog__button\" type=\"button\" onClick={onClick}>Show more</button>\n    </div>\n  );\n}\n\nexport default CatalogMoreButton;\n","import Logo from '../logo/logo';\n\nfunction PageFooter(): JSX.Element {\n  return (\n    <footer className=\"page-footer\">\n      <Logo IsFooter />\n      <div className=\"copyright\">\n        <p>© 2019 What to watch Ltd.</p>\n      </div>\n    </footer>\n  );\n}\n\nexport default PageFooter;\n","import { ReactNode } from 'react';\nimport { INFO_SCREEN_STYLES } from '../../styles/styles';\n\ntype InfoScreenProps = {\n  children?: ReactNode,\n}\n\nfunction InfoScreen({children}: InfoScreenProps): JSX.Element {\n  return (\n    <div className=\"page-content\" style={INFO_SCREEN_STYLES}>\n      {children}\n    </div>\n  );\n}\n\nexport default InfoScreen;\n","import InfoScreen from '../info-screen/info-screen';\nimport PageTitle from '../page-title/page-title';\nimport { LOADER_STYLES } from '../../styles/styles';\n\nfunction LoadingScreen(): JSX.Element {\n  return (\n    <InfoScreen>\n      <PageTitle >Loading screen</PageTitle>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" style={LOADER_STYLES} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n        <rect x=\"15\" y=\"30\" width=\"10\" height=\"40\" fill=\"#df5127\">\n          <animate attributeName=\"opacity\" dur=\"1s\" repeatCount=\"indefinite\" calcMode=\"spline\" keyTimes=\"0;0.5;1\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\" values=\"1;0.2;1\" begin=\"-0.6\"></animate>\n        </rect>\n        <rect x=\"35\" y=\"30\" width=\"10\" height=\"40\" fill=\"#e06a45\">\n          <animate attributeName=\"opacity\" dur=\"1s\" repeatCount=\"indefinite\" calcMode=\"spline\" keyTimes=\"0;0.5;1\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\" values=\"1;0.2;1\" begin=\"-0.4\"></animate>\n        </rect>\n        <rect x=\"55\" y=\"30\" width=\"10\" height=\"40\" fill=\"#df9984\">\n          <animate attributeName=\"opacity\" dur=\"1s\" repeatCount=\"indefinite\" calcMode=\"spline\" keyTimes=\"0;0.5;1\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\" values=\"1;0.2;1\" begin=\"-0.2\"></animate>\n        </rect>\n        <rect x=\"75\" y=\"30\" width=\"10\" height=\"40\" fill=\"#d6b1a6\">\n          <animate attributeName=\"opacity\" dur=\"1s\" repeatCount=\"indefinite\" calcMode=\"spline\" keyTimes=\"0;0.5;1\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\" values=\"1;0.2;1\" begin=\"-1\"></animate>\n        </rect>\n      </svg>\n    </InfoScreen>\n  );\n}\n\nexport default LoadingScreen;\n","import { Link } from 'react-router-dom';\nimport PageTitle from '../page-title/page-title';\nimport InfoScreen from '../info-screen/info-screen';\nimport { AppRoute } from '../../constants';\n\nfunction NotFoundScreen(): JSX.Element {\n  return (\n    <InfoScreen>\n      <PageTitle>This page does not exist</PageTitle>\n      <p>\n        <Link to={AppRoute.Root()} style={{color: 'inherit', textDecoration: 'none'}}>\n          Go to main page\n        </Link>\n      </p>\n    </InfoScreen>\n  );\n}\n\nexport default NotFoundScreen;\n","import { State } from '../../types/types';\n\nconst getFilter = ({ filter }: State): string => filter;\n\nexport { getFilter };\n","import { createSelector } from 'reselect';\nimport { ALL_GENRES } from '../../constants';\nimport { FetchStatusType, Film, State } from '../../types/types';\nimport { getFilter } from '../filter/filter-selectors';\n\nconst getAllFilmsData = ({ films }: State): Film[] | null => films.allFilms.data;\n\nconst getPromoFilmData = ({ films }: State): Film | null => films.promoFilm.data;\n\nconst getSimilarFilmsData = ({ films }: State): Film[] | null => films.similarFilms.data;\n\nconst getFavoriteFilmsData = ({ films }: State): Film[] | null => films.favoriteFilms.data;\n\nconst getCurrentFilmData = ({ films }: State): Film | null => films.currentFilm.data;\n\nconst getAllFilmsStatus = ({ films }: State): FetchStatusType => films.allFilms.status;\n\nconst getPromoFilmStatus = ({ films }: State): FetchStatusType => films.promoFilm.status;\n\nconst getSimilarFilmsStatus = ({ films }: State): FetchStatusType => films.similarFilms.status;\n\nconst getFavoriteFilmsStatus = ({ films }: State): FetchStatusType => films.favoriteFilms.status;\n\nconst getCurrentFilmStatus = ({ films }: State): FetchStatusType => films.currentFilm.status;\n\nconst getFilteredFilms = createSelector(\n  [ getAllFilmsData, getFilter ],\n  (films, filter)=> {\n    if (!films) {\n      return [];\n    }\n\n    if (!filter || filter === ALL_GENRES) {\n      return [ ...films];\n    }\n\n    return films.filter((film) => film.genre === filter);\n  },\n);\n\nexport { getFilteredFilms, getSimilarFilmsStatus, getFavoriteFilmsStatus, getCurrentFilmStatus, getAllFilmsData, getPromoFilmData, getSimilarFilmsData, getFavoriteFilmsData, getCurrentFilmData, getAllFilmsStatus, getPromoFilmStatus };\n","import { createSelector } from 'reselect';\nimport { MAX_GENRES_COUNT, ALL_GENRES } from '../../constants';\nimport { getAllFilmsData } from '../films/films-selectors';\n\nconst getGenres = createSelector(\n  [ getAllFilmsData ],\n  (films) => {\n    if (!films) {\n      return [];\n    }\n\n    const genres = new Set<string>();\n    films.forEach((film) => genres.add(film.genre));\n\n    return [ALL_GENRES, ...Array.from(genres).slice(0, MAX_GENRES_COUNT)];\n  },\n);\n\nexport { getGenres };\n","import { createAction } from '@reduxjs/toolkit';\nimport { ActionType } from '../../constants';\n\nconst setFilter = createAction(ActionType.SetFilter, (filter: string) => ({\n  payload: {\n    filter,\n  },\n}));\n\nexport { setFilter };\n","import { FetchStatus } from '../constants';\nimport { FetchStatusType } from '../types/types';\n\nconst isFetchIdle = (status: FetchStatusType): boolean => status === FetchStatus.Idle;\n\nconst isFetchNotReady = (status: FetchStatusType): boolean => status === FetchStatus.Idle || status === FetchStatus.Loading;\n\nconst isFetchError = (status: FetchStatusType): boolean => status === FetchStatus.Failed;\n\nconst isFetchSuccess = (status: FetchStatusType): boolean => status === FetchStatus.Succeeded;\n\nexport { isFetchError, isFetchNotReady, isFetchIdle, isFetchSuccess };\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CATALOG_INITIAL_PAGE, CATALOG_PAGE_SIZE } from '../../constants';\nimport PromoFilmCard from '../promo-film-card/promo-film-card';\nimport PageContent from '../page-content/page-content';\nimport Catalog from '../catalog/catalog';\nimport CatalogGenresList from '../catalog-genres-list/catalog-genres-list';\nimport CatalogFilmsList from '../catalog-films-list/catalog-films-list';\nimport CatalogMoreButton from '../catalog-more-button/catalog-more-button';\nimport PageFooter from '../page-footer/page-footer';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport NotFoundScreen from '../not-found-screen/not-found-screen';\nimport { getGenres } from '../../store/genres/genres-selectors';\nimport { setFilter } from '../../store/filter/filter-actions';\nimport { getFilter } from '../../store/filter/filter-selectors';\nimport { getAllFilms, getPromoFilm } from '../../store/films/films-api-actions';\nimport { isFetchError, isFetchIdle, isFetchNotReady } from '../../utils/fetched-data';\nimport { getAllFilmsStatus, getFilteredFilms, getPromoFilmData, getPromoFilmStatus } from '../../store/films/films-selectors';\n\n\nfunction MainScreen(): JSX.Element {\n  const allFilmsStatus = useSelector(getAllFilmsStatus);\n  const promoFilmsStatus = useSelector(getPromoFilmStatus);\n  const filter = useSelector(getFilter);\n  const genres = useSelector(getGenres);\n  const filteredFilms = useSelector(getFilteredFilms);\n  const promoFilm = useSelector(getPromoFilmData);\n  const dispatch = useDispatch();\n\n  const fetchAllFilms = () => {\n    dispatch(getAllFilms());\n  };\n  const fetchPromoFilm = () => {\n    dispatch(getPromoFilm());\n  };\n  const onFilterChange = useCallback((newFilter: string) => {\n    dispatch(setFilter(newFilter));\n  }, [dispatch]);\n\n  const onMoreButtonClick  = useCallback(() => {\n    setCurrentPage((prevCount) => prevCount + 1);\n  }, []);\n\n  const [ currentPage, setCurrentPage ] = useState(CATALOG_INITIAL_PAGE);\n\n  useEffect(() => {\n    if (isFetchIdle(allFilmsStatus)) {\n\n      fetchAllFilms();\n    }\n\n    if (isFetchIdle(promoFilmsStatus)) {\n      fetchPromoFilm();\n    }\n  }, [allFilmsStatus, promoFilmsStatus]);\n\n  useEffect(() => {\n    setCurrentPage(CATALOG_INITIAL_PAGE);\n  }, [filter]);\n\n  if (isFetchNotReady(allFilmsStatus) || isFetchNotReady(promoFilmsStatus)) {\n    return <LoadingScreen />;\n  }\n\n  if (isFetchError(allFilmsStatus) || isFetchError(promoFilmsStatus) || !promoFilm) {\n    return <NotFoundScreen />;\n  }\n\n  const catalogFilms = filteredFilms.slice(0, currentPage * CATALOG_PAGE_SIZE);\n  const isMoreButtonVisible = filteredFilms.length > catalogFilms.length;\n\n\n  return (\n    <>\n      <PromoFilmCard film={promoFilm} />\n\n      <PageContent>\n        <Catalog hiddenTitle=\"Catalog\">\n          <CatalogGenresList genres={genres} activeGenre={filter} setActiveGenre={onFilterChange} />\n          <CatalogFilmsList films={catalogFilms} />\n          { isMoreButtonVisible && <CatalogMoreButton onClick={onMoreButtonClick} /> }\n        </Catalog>\n\n        <PageFooter />\n      </PageContent>\n    </>\n  );\n}\n\nexport default MainScreen;\n","import { createAction } from '@reduxjs/toolkit';\nimport { ActionType } from '../../constants';\nimport { Comment, FetchStatusType } from '../../types/types';\n\nconst setCurrentComments = createAction(ActionType.SetCurrentComments, (currentComments: Comment[] | null) => ({\n  payload: {\n    currentComments,\n  },\n}));\n\nconst setCurrentCommentsFetchStatus = createAction(ActionType.SetCurrentCommentsFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nconst setNewCommentFetchStatus = createAction(ActionType.SetNewCommentFetchStatus, (status: FetchStatusType) => ({\n  payload: {\n    status,\n  },\n}));\n\nexport { setCurrentComments, setCurrentCommentsFetchStatus, setNewCommentFetchStatus };\n","import { useParams } from 'react-router-dom';\nimport { ParamsWithId } from '../types/types';\n\ntype useIdParamResult = {\n  id?: number,\n  error?: Error,\n}\n\nconst useIdParam = (): useIdParamResult => {\n  const { id } = useParams() as ParamsWithId;\n\n  if (!id) {\n    return ({\n      error: new Error('Id param does not exist'),\n    });\n  }\n\n  const parsedId = Number(id);\n\n  if (Number.isNaN(parsedId)) {\n    return ({\n      error: new Error('Id is not valid'),\n    });\n  }\n\n  return ({\n    id: parsedId,\n  });\n};\n\nexport { useIdParam };\n","import classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { FilmCardTab } from '../../constants';\nimport upperFirst from 'lodash/upperFirst';\n\nconst BASE_CLASS_NAME = 'film-nav';\nconst BASE_TAB_CLASS_NAME = 'film-nav__item';\n\ntype FilmCardTabsProps = {\n  className?: string;\n}\n\nfunction FilmCardTabs({className}: FilmCardTabsProps): JSX.Element {\n  const location = useLocation();\n  const fullClassName  = classNames(BASE_CLASS_NAME, className);\n\n  return (\n    <nav className={fullClassName} data-testid=\"film-card-navigation\">\n      <ul className=\"film-nav__list\">\n        {\n          Object.values(FilmCardTab).map((tab) => {\n            const fullItemClassName = classNames(BASE_TAB_CLASS_NAME, { [`${BASE_TAB_CLASS_NAME}--active`]: location.hash.slice(1) === tab });\n            const path = `${location.pathname}#${tab}`;\n\n            return (\n              <li key={tab} className={fullItemClassName}>\n                <Link to={path} className=\"film-nav__link\">{upperFirst(tab)}</Link>\n              </li>\n            );\n          })\n        }\n      </ul>\n    </nav>\n  );\n}\n\nexport default FilmCardTabs;\n","import { MAX_OVERVIEW_ACTORS_COUNT, RatingDescription, ratingDescriptionToLowerLimit  } from '../constants';\nimport type { ValuesOf } from '../types/types';\n\nconst formatRating = (rating: number): string => {\n  const formattedRating = String(rating).replace('.', ',');\n  return formattedRating.length === 1 ? `${formattedRating},0` : formattedRating;\n};\n\n\nconst formatOverviewActors = (actors: string[]): string => {\n  const formattedActors = actors.slice(0, MAX_OVERVIEW_ACTORS_COUNT).join(', ');\n  return actors.length > MAX_OVERVIEW_ACTORS_COUNT ? `${formattedActors} and others` : formattedActors;\n};\n\nconst getRatingDescription = (rating:number): ValuesOf<typeof RatingDescription> => {\n  const keys = Object.keys(RatingDescription).reverse() as Array<keyof typeof RatingDescription>;\n  for (const key of keys) {\n    if (rating >= ratingDescriptionToLowerLimit[key]) {\n      return RatingDescription[key];\n    }\n  }\n\n  return RatingDescription.Bad;\n};\n\nexport {formatRating, formatOverviewActors, getRatingDescription};\n","import type { Film } from '../../types/types';\nimport { getRatingDescription, formatRating, formatOverviewActors } from '../../utils/films';\n\ntype FilmOverviewProps = {\n  film: Film,\n}\n\nfunction FilmCardOverview({film}: FilmOverviewProps): JSX.Element {\n  return (\n    <>\n      <div className=\"film-rating\">\n        <div className=\"film-rating__score\" data-testid=\"film-overview-rating\">{formatRating(film.rating)}</div>\n        <p className=\"film-rating__meta\">\n          <span className=\"film-rating__level\">{getRatingDescription(film.rating)}</span>\n          <span className=\"film-rating__count\" data-testid=\"film-overview-scores-count\">{film.scoresCount} ratings</span>\n        </p>\n      </div>\n\n      <div className=\"film-card__text\">\n        <p data-testid=\"film-overview-description\">{film.description}</p>\n        <p className=\"film-card__director\" data-testid=\"film-overview-director\"><strong>Director: {film.director}</strong></p>\n        <p className=\"film-card__starring\" data-testid=\"film-overview-actors\"><strong>Starring: {formatOverviewActors(film.actors)}</strong></p>\n      </div>\n    </>\n  );\n}\n\nexport default FilmCardOverview;\n","import dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\n\ndayjs.extend(duration);\n\nconst SECONDS_IN_HOUR  = 3600;\n\nconst formatRuntime = (runtime: number): string => dayjs.duration(runtime, 'minutes').format('H[h] mm[m]');\n\nconst formatElapsedTime = (elapsedTime: number):string => {\n  const format = elapsedTime >= SECONDS_IN_HOUR ? '-HH:mm:ss' : '-mm:ss';\n  return dayjs.duration(elapsedTime, 'seconds').format(format);\n};\n\nconst formatDateTime  = (date: Date): string => dayjs(date).format('YYYY-MM-DD');\n\nconst formatHumanizedDate = (date: Date): string => dayjs(date).format('MMMM D, YYYY');\n\nexport {formatRuntime, formatElapsedTime, formatDateTime, formatHumanizedDate};\n","import { Fragment } from 'react';\nimport type { Film } from '../../types/types';\nimport { formatRuntime } from '../../utils/date';\n\ntype FilmDetailsProps = {\n  film: Film,\n}\n\nfunction FilmCardDetails({film}: FilmDetailsProps): JSX.Element {\n  const formattedActors = film.actors.map((actor, index, array) => {\n    const key = `${actor}-${index}`;\n    const isNotLast = index < array.length - 1;\n    return (\n      <Fragment key={key}>\n        {actor}{isNotLast && <br/>}\n      </Fragment>\n    );\n  });\n  return (\n    <div className=\"film-card__text film-card__row\">\n      <div className=\"film-card__text-col\">\n        <p className=\"film-card__details-item\">\n          <strong className=\"film-card__details-name\">Director</strong>\n          <span className=\"film-card__details-value\" data-testid=\"film-card-director\">{film.director}</span>\n        </p>\n        <p className=\"film-card__details-item\">\n          <strong className=\"film-card__details-name\">Starring</strong>\n          {formattedActors}\n        </p>\n      </div>\n\n      <div className=\"film-card__text-col\">\n        <p className=\"film-card__details-item\">\n          <strong className=\"film-card__details-name\">Run Time</strong>\n          <span className=\"film-card__details-value\" data-testid=\"film-card-run-time\">{formatRuntime(film.runTime)}</span>\n        </p>\n        <p className=\"film-card__details-item\">\n          <strong className=\"film-card__details-name\">Genre</strong>\n          <span className=\"film-card__details-value\" data-testid=\"film-card-genre\">{film.genre}</span>\n        </p>\n        <p className=\"film-card__details-item\">\n          <strong className=\"film-card__details-name\">Released</strong>\n          <span className=\"film-card__details-value\" data-testid=\"film-card-year\">{film.released}</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default FilmCardDetails;\n","import { Comment } from '../../types/types';\nimport { formatDateTime, formatHumanizedDate } from '../../utils/date';\nimport { formatRating } from '../../utils/films';\n\ntype ReviewProps = {\n  comment: Comment,\n}\n\nfunction Review({comment}: ReviewProps): JSX.Element {\n  return (\n    <div className=\"review\" data-testid=\"review\">\n      <blockquote className=\"review__quote\">\n        <p className=\"review__text\">{comment.comment}</p>\n\n        <footer className=\"review__details\">\n          <cite className=\"review__author\" data-testid=\"comment-user-name\">{comment.user.name}</cite>\n          <time className=\"review__date\" dateTime={formatDateTime(comment.date)} data-testid=\"comment-date\">{formatHumanizedDate(comment.date)}</time>\n        </footer>\n      </blockquote>\n\n      <div className=\"review__rating\" data-testid=\"comment-rating\">{formatRating(comment.rating)}</div>\n    </div>\n  );\n}\n\nexport default Review;\n","import Review from '../review/review';\nimport { Comment } from '../../types/types';\nimport { splitArrayInTwo } from '../../utils/common';\n\ntype FilmReviewsProps = {\n  comments: Comment[],\n}\n\nfunction FilmCardReviews({comments}: FilmReviewsProps): JSX.Element {\n  const reviews = comments.map((comment) => <Review key={comment.id} comment={comment} />);\n  const [ leftReviews, rightReviews ] = splitArrayInTwo(reviews);\n  return (\n    <div className=\"film-card__reviews film-card__row\">\n      <div className=\"film-card__reviews-col\">\n        { leftReviews }\n      </div>\n      <div className=\"film-card__reviews-col\">\n        { rightReviews }\n      </div>\n    </div>\n  );\n}\n\nexport default FilmCardReviews;\n","import { EMAIL_REGEX, LATIN_REGEX, NUMERIC_REGEX, EMPTY_SPACE, MIN_PASSWORD_LENGTH, Rating, ReviewContent } from '../constants';\n\nconst getEmailValidityMessage = ( email: string ): string => {\n  if (!email) {\n    return 'E-mail is required.';\n  }\n\n  if (!EMAIL_REGEX.test(email.toLowerCase())) {\n    return 'E-mail is invalid.';\n  }\n  return '';\n};\n\nconst getPasswordValidityMessage = (password: string): string => {\n  if (!password) {\n    return 'Password is required.';\n  }\n\n  if (password.length < MIN_PASSWORD_LENGTH) {\n    return `Password must have at least ${MIN_PASSWORD_LENGTH} symbols.`;\n  }\n\n  if (!NUMERIC_REGEX.test(password.toLowerCase())) {\n    return 'Password must contain at least one number.';\n  }\n\n  if (!LATIN_REGEX.test(password.toLowerCase())) {\n    return 'Password must contain at least one literal symbol.';\n  }\n\n  if (password.includes(EMPTY_SPACE)) {\n    return 'Password can not contain  empty spaces.';\n  }\n\n  return '';\n};\n\nconst getRandomInteger = (a = 0, b = 1): number => {\n  const lower = Math.ceil(Math.min(a, b));\n  const upper = Math.floor(Math.max(a, b));\n\n  return Math.floor(lower + Math.random() * (upper - lower + 1));\n};\n\nconst shuffle = <T>(items: T[]): T[] => items.slice().sort(() => Math.random() - 0.5);\n\nconst getRandomItemFromArray = <T>(items: T[]): T => {\n  const index = getRandomInteger(0, items.length - 1);\n  return items[index];\n};\n\nconst splitArrayInTwo = <T>(items: T[]): [T[], T[]] => {\n  const middleIndex = Math.ceil(items.length / 2);\n  return [ items.slice(0, middleIndex), items.slice(middleIndex)];\n};\n\nconst validateReviewRating = (rating: number): boolean => {\n  if (rating >= Rating.MinValue && rating <= Rating.MaxValue) {\n    return true;\n  }\n\n  return false;\n};\n\nconst validateReviewContent = (content: string): boolean => {\n  if (content.length >= ReviewContent.MinLength && content.length <= ReviewContent.MaxLength) {\n    return true;\n  }\n\n  return false;\n};\n\nconst asyncDelay = (delay: number): Promise<void> => new Promise<void>((resolve) => setTimeout(() => resolve(), delay));\n\nexport { asyncDelay, validateReviewRating, validateReviewContent, getPasswordValidityMessage, getEmailValidityMessage, getRandomInteger, shuffle, getRandomItemFromArray, splitArrayInTwo };\n","\nimport { useLocation, Redirect } from 'react-router-dom';\nimport type { Comment, Film, ValuesOf } from '../../types/types';\nimport { FilmCardTab, FilmCardBackgroundSize } from '../../constants';\nimport FilmCardBackground from '../film-card-background/film-card-background';\nimport FilmCardPoster from '../film-card-poster/film-card-poster';\nimport Logo from '../logo/logo';\nimport FilmCardButtons from '../film-card-buttons/film-card-buttons';\nimport UserBlock from '../user-block/user-block';\nimport FilmCardTabs from '../film-card-tabs/film-card-tabs';\nimport FilmCardOverview from '../film-card-overview/film-card-overview';\nimport FilmCardDetails from '../film-card-details/film-card-details';\nimport FilmCardReviews from '../film-card-reviews/film-card-reviews';\nimport PageTitle from '../page-title/page-title';\nimport PageHeader from '../page-header/page-header';\n\ntype FullFilmCardProps = {\n  film: Film,\n  comments: Comment[];\n}\n\nfunction FullFilmCard({film, comments}: FullFilmCardProps): JSX.Element {\n  const location = useLocation();\n\n  const parsedTab = location.hash.slice(1);\n  const isTabCorrect = Object.values(FilmCardTab)\n    .some((tab) => tab === parsedTab);\n\n  if (!isTabCorrect) {\n    return <Redirect to={`${location.pathname}#${FilmCardTab.Overview}`} />;\n  }\n\n  const currentTab = parsedTab as ValuesOf<typeof FilmCardTab>;\n\n  const filmCardTabToContent: {\n      [key in ValuesOf<typeof FilmCardTab>]: JSX.Element\n    } = {\n      [FilmCardTab.Details]: <FilmCardDetails film={film} />,\n      [FilmCardTab.Overview]: <FilmCardOverview film={film} />,\n      [FilmCardTab.Reviews]: <FilmCardReviews comments={comments} />,\n    };\n\n  return (\n    <section className=\"film-card film-card--full\" style={{backgroundColor: film.backgroundColor}}>\n      <div className=\"film-card__hero\">\n        <FilmCardBackground src={film.backgroundImage} alt={film.name} />\n        <PageTitle IsHidden>WTW</PageTitle>\n        <PageHeader className=\"film-card__head\">\n          <Logo />\n          <UserBlock />\n        </PageHeader>\n        <div className=\"film-card__wrap\">\n          <div className=\"film-card__desc\">\n            <h2 className=\"film-card__title\">{film.name}</h2>\n            <p className=\"film-card__meta\">\n              <span className=\"film-card__genre\">{film.genre}</span>\n              <span className=\"film-card__year\">{film.released}</span>\n            </p>\n            <FilmCardButtons isFilmFavorite={film.isFavorite} withAddReview film={film}/>\n          </div>\n        </div>\n      </div>\n      <div className=\"film-card__wrap film-card__translate-top\">\n        <div className=\"film-card__info\">\n          <FilmCardPoster src={film.posterImage} alt={`${film.name} poster`} size={FilmCardBackgroundSize.Big} />\n\n          <div className=\"film-card__desc\">\n            <FilmCardTabs className=\"film-card__nav\" />\n            { filmCardTabToContent[currentTab] }\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default FullFilmCard;\n","import { createSelector } from 'reselect';\nimport { Comment, FetchStatusType, State } from '../../types/types';\nimport { FetchStatus } from '../../constants';\n\nconst getCurrentCommentsData = ({ comments }: State): Comment[] | null => comments.currentComments.data;\n\nconst getCurrentCommentsStatus = ({ comments }: State): FetchStatusType => comments.currentComments.status;\n\nconst isNewCommentsLoading = createSelector(\n  ({ comments }: State) => comments.newComment.status,\n  (status) => status === FetchStatus.Loading,\n);\n\nexport { getCurrentCommentsData, getCurrentCommentsStatus, isNewCommentsLoading  };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setCurrentCommentsFetchStatus } from '../../store/comments/comments-actions';\nimport PageFooter from '../page-footer/page-footer';\nimport { useIdParam } from '../../hooks/use-id-param';\nimport CatalogFilmsList from '../catalog-films-list/catalog-films-list';\nimport FullFilmCard from '../full-film-card/full-film-card';\nimport Catalog from '../catalog/catalog';\nimport PageContent from '../page-content/page-content';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport { useEffect, useRef, useState } from 'react';\nimport { AppRoute, FetchStatus, MAX_SIMILAR_FILMS_COUNT } from '../../constants';\nimport { getCurrentComments } from '../../store/comments/comments-api-actions';\nimport { getCurrentCommentsData, getCurrentCommentsStatus } from '../../store/comments/comments-selectors';\nimport { getCurrentFilm, getSimilarFilms } from '../../store/films/films-api-actions';\nimport { getCurrentFilmData, getCurrentFilmStatus, getSimilarFilmsData, getSimilarFilmsStatus } from '../../store/films/films-selectors';\nimport { isFetchError, isFetchIdle, isFetchNotReady, isFetchSuccess } from '../../utils/fetched-data';\nimport { setCurrentFilmFetchStatus, setSimilarFilmsFetchStatus } from '../../store/films/films-actions';\nimport { FetchStatusType } from '../../types/types';\n\nfunction FilmScreen(): JSX.Element {\n  const { id: filmId, error } = useIdParam();\n  const film = useSelector(getCurrentFilmData);\n  const comments = useSelector(getCurrentCommentsData);\n  const similarFilms = useSelector(getSimilarFilmsData);\n  const filmStatus = useSelector(getCurrentFilmStatus);\n  const commentsStatus = useSelector(getCurrentCommentsStatus);\n  const similarFilmsStatus = useSelector(getSimilarFilmsStatus);\n\n  const [screenStatus, setScreenStatus] = useState<FetchStatusType>(FetchStatus.Idle);\n  const screenStatusRef = useRef(screenStatus);\n\n  const dispatch = useDispatch();\n\n  const fetchCurrentFilm = (id: number) => {\n    dispatch(getCurrentFilm(id));\n  };\n\n  const fetchCurrentComments = (id: number) => {\n    dispatch(getCurrentComments(id));\n  };\n\n  const fetchSimilarFilms = (id: number) => {\n    dispatch(getSimilarFilms(id));\n  };\n\n  useEffect(() => {\n    if (!filmId) {\n      return;\n    }\n    if (film?.id !== filmId) {\n      fetchCurrentFilm(filmId);\n      fetchCurrentComments(filmId);\n      fetchSimilarFilms(filmId);\n      return;\n    }\n    if (isFetchIdle(filmStatus)) {\n      fetchCurrentFilm(filmId);\n    }\n    if (isFetchIdle(commentsStatus)) {\n      fetchCurrentComments(filmId);\n    }\n    if (isFetchIdle(similarFilmsStatus)) {\n      fetchSimilarFilms(filmId);\n    }\n  }, [film?.id, filmId]);\n\n  useEffect(() => {\n    if (\n      isFetchNotReady(filmStatus) ||\n      isFetchNotReady(commentsStatus) ||\n      isFetchNotReady(similarFilmsStatus)\n    ) {\n      setScreenStatus(FetchStatus.Loading);\n      return;\n    }\n\n    if (\n      isFetchError(filmStatus) ||\n      isFetchError(commentsStatus) ||\n      isFetchError(similarFilmsStatus)\n    ) {\n      setScreenStatus(FetchStatus.Failed);\n      return;\n    }\n\n    setScreenStatus(FetchStatus.Succeeded);\n  }, [filmStatus, commentsStatus, similarFilmsStatus]);\n\n  useEffect(() => {\n    screenStatusRef.current = screenStatus;\n  }, [screenStatus]);\n\n  useEffect(() => () => {\n    if (!isFetchSuccess(screenStatusRef.current)) {\n      dispatch(setCurrentFilmFetchStatus(FetchStatus.Idle));\n      dispatch(setSimilarFilmsFetchStatus(FetchStatus.Idle));\n      dispatch(setCurrentCommentsFetchStatus(FetchStatus.Idle));\n    }\n  }, []);\n\n  if (error || isFetchError(screenStatus)) {\n    return <Redirect to={AppRoute.NotFound()} />;\n  }\n\n  if (isFetchNotReady(screenStatus)) {\n    return <LoadingScreen />;\n  }\n\n  if (!film || !comments || !similarFilms) {\n    return <Redirect to={AppRoute.NotFound()} />;\n  }\n\n  return (\n    <>\n      <FullFilmCard film={film} comments={comments} />\n\n      <PageContent>\n        <Catalog title=\"More like this\" likeThis>\n          <CatalogFilmsList\n            films={similarFilms.slice(0, MAX_SIMILAR_FILMS_COUNT)}\n          />\n        </Catalog>\n\n        <PageFooter />\n      </PageContent>\n    </>\n  );\n}\nexport default FilmScreen;\n","import toast from 'react-hot-toast';\nimport { APIRoute, AppRoute, FetchStatus } from '../../constants';\nimport { adaptCommentToClient } from '../../services/adapters';\nimport { CommentPost, ServerCommentGet, ThunkActionResult } from '../../types/types';\nimport { redirectToRoute } from '../app/app-actions';\nimport { setCurrentCommentsFetchStatus, setCurrentComments, setNewCommentFetchStatus } from './comments-actions';\n\nexport const getCurrentComments = (filmId: number): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setCurrentCommentsFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverComments } = await api.get<ServerCommentGet[]>(APIRoute.Comments(filmId));\n\n      const comments = serverComments.map((serverComment) => adaptCommentToClient(serverComment));\n\n      dispatch(setCurrentComments(comments));\n      dispatch(setCurrentCommentsFetchStatus(FetchStatus.Succeeded));\n\n    } catch {\n      dispatch(setCurrentCommentsFetchStatus(FetchStatus.Failed));\n    }\n  };\n\nexport const postComment = (filmId: number, formData: CommentPost): ThunkActionResult =>\n  async (dispatch, _getState, api): Promise<void> => {\n    dispatch(setNewCommentFetchStatus(FetchStatus.Loading));\n\n    try {\n      const { data: serverComments } = await api.post<ServerCommentGet[]>(APIRoute.Comments(filmId), formData);\n\n      const comments = serverComments.map((serverComment) => adaptCommentToClient(serverComment));\n\n      dispatch(setCurrentComments(comments));\n      dispatch(setNewCommentFetchStatus(FetchStatus.Succeeded));\n      dispatch(setCurrentCommentsFetchStatus(FetchStatus.Succeeded));\n      dispatch(redirectToRoute(AppRoute.Film(filmId)));\n\n    } catch {\n      toast.error('Failed to add review');\n      dispatch(setNewCommentFetchStatus(FetchStatus.Failed));\n    }\n  };\n","import { Link, Redirect } from 'react-router-dom';\nimport { isFetchError, isFetchNotReady, isFetchSuccess } from '../../utils/fetched-data';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport { useEffect, useRef } from 'react';\nimport { useIdParam } from '../../hooks/use-id-param';\nimport { AppRoute, FetchStatus } from '../../constants';\nimport { getCurrentFilm } from '../../store/films/films-api-actions';\nimport { getCurrentFilmData, getCurrentFilmStatus } from '../../store/films/films-selectors';\nimport round from 'lodash/round';\nimport { formatElapsedTime } from '../../utils/date';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useVideo } from '../../hooks/use-video';\nimport { setCurrentFilmFetchStatus } from '../../store/films/films-actions';\n\nconst TOGGLER_POSITION_DECIMAL_PRECISION = 2;\n\nfunction PlayerScreen(): JSX.Element {\n  const { id: filmId, error } = useIdParam();\n  const film = useSelector(getCurrentFilmData);\n  const filmStatus = useSelector(getCurrentFilmStatus);\n  const filmStatusRef = useRef(filmStatus);\n  const dispatch = useDispatch();\n  const fetchCurrentFilm = (id: number) => {\n    dispatch(getCurrentFilm(id));\n  };\n\n  useEffect(() => {\n    filmStatusRef.current = filmStatus;\n  }, [filmStatus]);\n\n  useEffect(() => {\n    if (!filmId || film?.id === filmId) {\n      return;\n    }\n\n    fetchCurrentFilm(filmId);\n  }, [film?.id, filmId]);\n\n\n  useEffect(() => () => {\n    if (!isFetchSuccess(filmStatusRef.current)) {\n      dispatch(setCurrentFilmFetchStatus(FetchStatus.Idle));\n    }\n  }, []);\n\n  const {\n    ref: videoRef,\n    isPlay: isVideoPlay,\n    isReady: isVideoReady,\n    duration: videoDuration,\n    percentage: videoPercentage,\n    elapsedTime: videoElapsedTime,\n    togglePlay: toggleVideoPlay,\n    onPlay: onVideoPlay,\n    onPause: onVideoPause,\n    onLoadedData: onVideoLoadedData,\n    onTimeUpdate: onVideoTimeUpdate,\n    requestFullScreen: requestVideoFullScreen,\n  } = useVideo();\n\n  if (error || isFetchError(filmStatus)) {\n    return <Redirect to={AppRoute.NotFound()} />;\n  }\n\n  if (isFetchNotReady(filmStatus)) {\n    return <LoadingScreen />;\n  }\n\n  if (!film) {\n    return <Redirect to={AppRoute.NotFound()} />;\n  }\n\n  const onFullScreenButtonClick = () => {\n    requestVideoFullScreen();\n  };\n\n  const onPlayButtonClick = () => {\n    toggleVideoPlay();\n  };\n\n  const togglerLeftPosition = `${round(videoPercentage, TOGGLER_POSITION_DECIMAL_PRECISION)}%`;\n  const playButtonIcon = isVideoPlay ? '#pause' : '#play-s';\n  const timeValueTextContent = isVideoReady ? formatElapsedTime(videoElapsedTime) : 'Loading...';\n\n  return (\n    <div className=\"player\">\n      {!isVideoReady && <LoadingScreen />}\n\n      <video\n        ref={videoRef}\n        src={film.videoLink}\n        className=\"player__video\"\n        poster={film.previewImage}\n        onPlay={onVideoPlay}\n        onPause={onVideoPause}\n        onTimeUpdate={onVideoTimeUpdate}\n        onLoadedData={onVideoLoadedData}\n        data-testid=\"video-player\"\n      />\n\n      <Link\n        to={AppRoute.Film(filmId)}\n        className=\"player__exit\"\n        style={{ textDecoration: 'none' }}\n      >\n        Exit\n      </Link>\n\n      <div className=\"player__controls\">\n        <div className=\"player__controls-row\">\n          <div className=\"player__time\">\n            <progress\n              className=\"player__progress\"\n              value={videoDuration - videoElapsedTime}\n              max={videoDuration}\n            />\n            <div\n              className=\"player__toggler\"\n              style={{ left: togglerLeftPosition }}\n            >\n              Toggler\n            </div>\n          </div>\n          <div className=\"player__time-value\">\n            {timeValueTextContent}\n          </div>\n        </div>\n        <div className=\"player__controls-row\">\n          <button\n            type=\"button\"\n            className=\"player__play\"\n            onClick={onPlayButtonClick}\n            disabled={!isVideoReady}\n          >\n            <svg viewBox=\"0 0 19 19\" width=\"19\" height=\"19\">\n              <use xlinkHref={playButtonIcon}></use>\n            </svg>\n            <span>Play</span>\n          </button>\n          <div className=\"player__name\">{film.name}</div>\n\n          <button\n            type=\"button\"\n            className=\"player__full-screen\"\n            onClick={onFullScreenButtonClick}\n            disabled={!isVideoReady}\n          >\n            <svg viewBox=\"0 0 27 27\" width=\"27\" height=\"27\">\n              <use xlinkHref=\"#full-screen\"></use>\n            </svg>\n            <span>Full screen</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PlayerScreen;\n","import { useRef, useState, useEffect, RefObject } from 'react';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\ntype useVideoResult = {\n  ref: RefObject<HTMLVideoElement>,\n  isPlay: boolean,\n  isReady: boolean,\n  duration: number,\n  percentage: number,\n  elapsedTime: number,\n  togglePlay: () => void,\n  onPlay: () => void,\n  onPause: () => void,\n  onLoadedData: () => void,\n  onTimeUpdate: () => void,\n  requestFullScreen: () => void,\n}\n\nconst useVideo = (): useVideoResult => {\n  const ref = useRef<HTMLVideoElement>(null);\n\n  const [isReady, setReady] = useState(false);\n  const [isPlay, setPlay] = useState(false);\n\n  const [duration, setDuration] = useState(0);\n  const [percentage, setPercentage] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  const play = async (node: HTMLVideoElement) => {\n    try {\n      await node.play();\n    } catch {\n      setPlay(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!isReady || !ref.current) {\n      return;\n    }\n\n    const receivedDuration = Math.round(ref.current.duration);\n\n    setDuration(receivedDuration);\n    setElapsedTime(receivedDuration);\n    setPlay(true);\n  }, [isReady]);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const node = ref.current;\n\n    if (isPlay) {\n      play(node);\n      return;\n    }\n\n    node.pause();\n  }, [isPlay]);\n\n  const onLoadedData = () => {\n    setReady(true);\n  };\n\n  const onTimeUpdate = () => {\n    if (!ref.current) {\n      return;\n    }\n\n    const node = ref.current;\n    const currentPercentage = node.currentTime / duration * ONE_HUNDRED_PERCENT;\n    const currentElapsedTime = Math.round(duration * (ONE_HUNDRED_PERCENT - currentPercentage) / ONE_HUNDRED_PERCENT);\n\n    setPercentage(currentPercentage);\n    setElapsedTime(currentElapsedTime);\n  };\n\n  const requestFullScreen = () => {\n    if (!ref.current) {\n      return;\n    }\n\n    ref.current.requestFullscreen();\n  };\n\n  const togglePlay = () => {\n    setPlay((prevIsPlay) => !prevIsPlay);\n  };\n\n  const onPlay = () => {\n    setPlay(true);\n  };\n\n  const onPause = () => {\n    setPlay(false);\n  };\n\n  return {\n    ref,\n    isPlay,\n    isReady,\n    duration,\n    percentage,\n    elapsedTime,\n    togglePlay,\n    onLoadedData,\n    onTimeUpdate,\n    onPlay,\n    onPause,\n    requestFullScreen,\n  };\n};\n\nexport {useVideo};\n","import { ChangeEvent, FocusEvent, FormEvent, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { Login } from '../../types/types';\nimport { getEmailValidityMessage, getPasswordValidityMessage } from '../../utils/common';\nimport { postLogin } from '../../store/authorization/authorization-api-actions';\nimport { getAuthorizationErrorMessage } from '../../store/authorization/authorization-selectors';\nimport { clearAuthorizationErrorMessage } from '../../store/authorization/authorization-actions';\n\nconst INITIAL_FORM_DATA: Login = {\n  email: '',\n  password: '',\n} as const;\n\nconst INITIAL_FORM_DIRTINESS: {\n  [key in keyof typeof INITIAL_FORM_DATA]: boolean\n} = {\n  email: false,\n  password: false,\n} as const;\n\ntype LoginFormProps = {\n  className?: string;\n};\n\nfunction LoginForm({ className }: LoginFormProps): JSX.Element {\n  const serverErrorMessage = useSelector(getAuthorizationErrorMessage);\n  const [formData, setFormData] = useState(INITIAL_FORM_DATA);\n  const [formDirtiness, setFormDirtiness] = useState(INITIAL_FORM_DIRTINESS);\n\n  const emailValidityMessage = useMemo(\n    () => formDirtiness.email ? getEmailValidityMessage(formData.email) : '',\n    [formData.email, formDirtiness.email],\n  );\n\n  const passwordValidityMessage = useMemo(\n    () => formDirtiness.password ? getPasswordValidityMessage(formData.password) : '',\n    [formData.password, formDirtiness.password],\n  );\n\n  const validityMessage = useMemo(\n    () => `${emailValidityMessage} ${passwordValidityMessage}`.trim(),\n    [emailValidityMessage, passwordValidityMessage],\n  );\n\n  const dispatch = useDispatch();\n\n  const login = (user: Login) => {\n    dispatch(postLogin(user));\n  };\n\n  const onInputBlur = (evt: FocusEvent<HTMLInputElement>) => {\n    const { name } = evt.target;\n    setFormDirtiness({\n      ...formDirtiness,\n      [name]: true,\n    });\n  };\n\n  const onInputChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = evt.target;\n    setFormData({\n      ...formData,\n      [name]: value.trim(),\n    });\n  };\n\n  const onFormSubmit = (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    if (!formDirtiness.email || !formDirtiness.password) {\n      setFormDirtiness({\n        email: true,\n        password: true,\n      });\n\n      return;\n    }\n\n    if (validityMessage) {\n      return;\n    }\n\n    login(formData);\n  };\n\n  useEffect(() => {\n    if (serverErrorMessage) {\n      setFormDirtiness(INITIAL_FORM_DIRTINESS);\n    }\n  }, [serverErrorMessage]);\n\n  useEffect(() => {\n    if (validityMessage) {\n      dispatch(clearAuthorizationErrorMessage());\n    }\n  }, [validityMessage]);\n\n  return (\n    <div className={classNames('sign-in', className)} data-testid=\"login-form-container\">\n      <form action=\"#\" className=\"sign-in__form\" onSubmit={onFormSubmit} data-testid=\"login-form\">\n        <div className=\"sign-in__fields\">\n          {validityMessage && (\n            <div className=\"sign-in__message\" data-testid=\"validity-message\">\n              <p>{validityMessage}</p>\n            </div>\n          )}\n\n          {serverErrorMessage && (\n            <div className=\"sign-in__message\" data-testid=\"server-message\">\n              <p>{serverErrorMessage}</p>\n            </div>\n          )}\n\n          <div\n            className={classNames('sign-in__field', {\n              'sign-in__field--error': !!emailValidityMessage,\n            })}\n          >\n            <input\n              className=\"sign-in__input\"\n              type=\"text\"\n              placeholder=\"Email address\"\n              name=\"email\"\n              id=\"user-email\"\n              value={formData.email}\n              onChange={onInputChange}\n              onBlur={onInputBlur}\n              data-testid=\"email-input\"\n            />\n            <label\n              className=\"sign-in__label visually-hidden\"\n              htmlFor=\"user-email\"\n            >\n              Email address\n            </label>\n          </div>\n          <div\n            className={classNames('sign-in__field', {\n              'sign-in__field--error': !!passwordValidityMessage,\n            })}\n          >\n            <input\n              className=\"sign-in__input\"\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n              id=\"user-password\"\n              value={formData.password}\n              onChange={onInputChange}\n              onBlur={onInputBlur}\n              data-testid=\"password-input\"\n            />\n            <label\n              className=\"sign-in__label visually-hidden\"\n              htmlFor=\"user-password\"\n            >\n              Password\n            </label>\n          </div>\n        </div>\n        <div className=\"sign-in__submit\">\n          <button className=\"sign-in__btn\" type=\"submit\" data-testid=\"submit-button\">\n            Sign in\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginForm;\n","import PageHeader from '../page-header/page-header';\nimport Logo from '../logo/logo';\nimport PageTitle from '../page-title/page-title';\nimport LoginForm from '../login-form/login-form';\nimport PageFooter from '../page-footer/page-footer';\n\nfunction LoginScreen(): JSX.Element {\n  return (\n    <div className=\"user-page\">\n      <PageHeader className=\"user-page__head\">\n        <Logo />\n\n        <PageTitle IsHidden>WTW</PageTitle>\n      </PageHeader>\n\n      <LoginForm className=\"user-page__content\" />\n\n      <PageFooter />\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import Logo from '../logo/logo';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isFetchError, isFetchNotReady } from '../../utils/fetched-data';\nimport UserBlock from '../user-block/user-block';\nimport FilmCardsList from '../catalog-films-list/catalog-films-list';\nimport PageFooter from '../page-footer/page-footer';\nimport Catalog from '../catalog/catalog';\nimport PageTitle from '../page-title/page-title';\nimport PageHeader from '../page-header/page-header';\nimport { getFavoriteFilms } from '../../store/films/films-api-actions';\nimport NotFoundScreen from '../not-found-screen/not-found-screen';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport { getFavoriteFilmsData, getFavoriteFilmsStatus } from '../../store/films/films-selectors';\n\nfunction MyListScreen(): JSX.Element {\n  const favoriteFilms = useSelector(getFavoriteFilmsData);\n  const favoriteFilmsStatus = useSelector(getFavoriteFilmsStatus);\n  const dispatch = useDispatch();\n  const fetchFavoriteFilms = () => {\n    dispatch(getFavoriteFilms());\n  };\n\n  useEffect(() => {\n    fetchFavoriteFilms();\n  }, []);\n\n  if (isFetchNotReady(favoriteFilmsStatus)) {\n    return <LoadingScreen />;\n  }\n\n  if (isFetchError(favoriteFilmsStatus) || !favoriteFilms) {\n    return <NotFoundScreen />;\n  }\n\n  return (\n    <div className=\"user-page\">\n      <PageHeader className=\"user-page__head\">\n        <Logo />\n        <PageTitle className=\"user-page__title\">My list</PageTitle>\n        <UserBlock />\n      </PageHeader>\n\n      <Catalog hiddenTitle=\"Catalog\">\n\n        <FilmCardsList films={favoriteFilms} />\n      </Catalog>\n\n      <PageFooter />\n    </div>\n  );\n}\n\nexport default MyListScreen;\n","import { Link } from 'react-router-dom';\nimport type { Film } from '../../types/types';\nimport { AppRoute } from '../../constants';\n\ntype BreadcrumbsProps = {\n  film: Film\n}\n\nfunction Breadcrumbs({film}: BreadcrumbsProps): JSX.Element {\n  return (\n    <nav className=\"breadcrumbs\">\n      <ul className=\"breadcrumbs__list\">\n        <li className=\"breadcrumbs__item\">\n          <Link to={AppRoute.Film(film.id)} className=\"breadcrumbs__link\" data-testid=\"film-link\">{film.name}</Link>\n        </li>\n        <li className=\"breadcrumbs__item\">\n          <Link to={AppRoute.AddReview(film.id)} className=\"breadcrumbs__link\">Add review</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Breadcrumbs;\n","import { useState, ChangeEvent, FormEvent, Fragment, useEffect, useMemo } from 'react';\nimport { postComment } from '../../store/comments/comments-api-actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Rating } from '../../constants';\nimport { CommentPost } from '../../types/types';\nimport { useIdParam } from '../../hooks/use-id-param';\nimport { isNewCommentsLoading } from '../../store/comments/comments-selectors';\nimport { validateReviewContent, validateReviewRating } from '../../utils/common';\n\nconst INITIAL_FORM_DATA: CommentPost = {\n  rating: 0,\n  comment: '',\n} as const;\n\nfunction AddReviewForm(): JSX.Element {\n  const { id: filmId } = useIdParam() as { id: number };\n  const [rating, setRating] = useState(INITIAL_FORM_DATA.rating);\n  const [comment, setComment] = useState(INITIAL_FORM_DATA.comment);\n  const [isFormValid, setFormValidity] = useState(false);\n\n  const isFormLoading = useSelector(isNewCommentsLoading);\n\n  const dispatch = useDispatch();\n\n  const createReview = (formData: CommentPost) => {\n    dispatch(postComment(filmId, formData));\n  };\n  const isRatingValid = useMemo(() => validateReviewRating(rating), [rating]);\n  const isReviewContentValid = useMemo(() => validateReviewContent(comment), [comment]);\n\n  useEffect(() => {\n    setFormValidity(isRatingValid && isReviewContentValid);\n  }, [isRatingValid, isReviewContentValid]);\n\n  const handleRatingChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setRating(Number(evt.currentTarget.value));\n  };\n\n  const onCommentChange = (evt: ChangeEvent<HTMLTextAreaElement>) => {\n    setComment(evt.currentTarget.value);\n  };\n\n  const onFormSubmit = (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    const formData: CommentPost = {\n      rating,\n      comment,\n    };\n\n    createReview(formData);\n  };\n\n  return (\n    <div className=\"add-review\">\n      <form action=\"#\" className=\"add-review__form\" onSubmit={onFormSubmit} data-testid=\"form\">\n        <div className=\"rating\">\n          <div className=\"rating__stars\">\n            { new Array(Rating.MaxValue)\n              .fill(null)\n              .map((item, index) => index + 1)\n              .reverse()\n              .map((value) => {\n                const inputId = `star-${value}`;\n                const IsChecked = value === rating;\n\n                return (\n                  <Fragment key={value}>\n                    <input\n                      id={inputId}\n                      className=\"rating__input\"\n                      type=\"radio\"\n                      name=\"rating\"\n                      value={value}\n                      checked={IsChecked}\n                      disabled={isFormLoading}\n                      onChange={handleRatingChange}\n                    />\n                    <label className=\"rating__label\" htmlFor={inputId} data-testid={inputId}>\n                      Rating {value}\n                    </label>\n                  </Fragment>\n                );\n              }) }\n          </div>\n        </div>\n\n        <div className=\"add-review__text\">\n          <textarea\n            id=\"review-text\"\n            className=\"add-review__textarea\"\n            name=\"review-text\"\n            placeholder=\"Review text\"\n            value={comment}\n            disabled={isFormLoading}\n            onChange={onCommentChange}\n            data-testid=\"review-text\"\n          />\n          <div className=\"add-review__submit\">\n            <button\n              className=\"add-review__btn\"\n              type=\"submit\"\n              disabled={!isFormValid || isFormLoading}\n              data-testid=\"submit-button\"\n            >\n                Post\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default AddReviewForm;\n","import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { AppRoute, FetchStatus } from '../../constants';\nimport { useIdParam } from '../../hooks/use-id-param';\nimport { isFetchError, isFetchNotReady, isFetchSuccess } from '../../utils/fetched-data';\nimport PageHeader from '../page-header/page-header';\nimport PageTitle from '../page-title/page-title';\nimport Logo from '../logo/logo';\nimport Breadcrumbs from '../breadcrumbs/breadcrumbs';\nimport FilmCardBackground from '../film-card-background/film-card-background';\nimport FilmCardPoster from '../film-card-poster/film-card-poster';\nimport UserBlock from '../user-block/user-block';\nimport AddReviewForm from '../add-review-form/add-review-form';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport { getCurrentFilm } from '../../store/films/films-api-actions';\nimport { getCurrentFilmData, getCurrentFilmStatus } from '../../store/films/films-selectors';\nimport { FilmCardBackgroundSize } from '../../constants';\nimport { setCurrentFilmFetchStatus } from '../../store/films/films-actions';\n\nfunction AddReviewScreen(): JSX.Element {\n  const { id: filmId, error } = useIdParam();\n  const film = useSelector(getCurrentFilmData);\n  const filmStatus = useSelector(getCurrentFilmStatus);\n  const filmStatusRef = useRef(filmStatus);\n  const dispatch = useDispatch();\n  const fetchCurrentFilm = (id: number) => {\n    dispatch(getCurrentFilm(id));\n  };\n\n  useEffect(() => {\n    if (!filmId || film?.id === filmId) {\n      return;\n    }\n\n    fetchCurrentFilm(filmId);\n  }, [film?.id, filmId]);\n\n  useEffect(() => {\n    filmStatusRef.current = filmStatus;\n  }, [filmStatus]);\n\n  useEffect(() => () => {\n    if (!isFetchSuccess(filmStatusRef.current)) {\n      dispatch(setCurrentFilmFetchStatus(FetchStatus.Idle));\n    }\n  }, []);\n\n  if (error || isFetchError(filmStatus)) {\n    return <Redirect to={AppRoute.NotFound()} />;\n  }\n\n  if (isFetchNotReady(filmStatus)) {\n    return <LoadingScreen />;\n  }\n\n  if (!film) {\n    return <Redirect to={AppRoute.NotFound()} />;\n  }\n\n  return (\n    <section className=\"film-card film-card--full\" style={{backgroundColor: film.backgroundColor}}>\n      <div className=\"film-card__header\">\n        <FilmCardBackground src={film.backgroundImage} alt={film.name} />\n\n        <PageTitle IsHidden>WTW</PageTitle>\n\n        <PageHeader>\n          <Logo />\n          <Breadcrumbs film={film} />\n          <UserBlock />\n        </PageHeader>\n\n        <FilmCardPoster src={film.posterImage} alt={`${film.name} poster`} size={FilmCardBackgroundSize.Small} />\n      </div>\n      <AddReviewForm />\n\n    </section>\n  );\n}\n\nexport default AddReviewScreen;\n","import { Redirect, Route, RouteProps } from 'react-router-dom';\nimport { AuthorizationStatus, CustomRouteType, AppRoute } from '../../constants';\nimport { getAuthorizationStatus } from '../../store/authorization/authorization-selectors';\nimport { useSelector } from 'react-redux';\nimport type { ValuesOf } from '../../types/types';\n\ntype CustomRouteProps = RouteProps & {\n  type: ValuesOf<typeof CustomRouteType>,\n}\n\nfunction CustomRoute({type, ...props}: CustomRouteProps): JSX.Element {\n  const authorizationStatus = useSelector(getAuthorizationStatus);\n\n  switch (type) {\n    case CustomRouteType.Private: {\n      return (\n        <Route { ...props }>\n          { authorizationStatus  === AuthorizationStatus.Auth ? props.children : <Redirect to={AppRoute.Login()} />}\n        </Route>\n      );\n    }\n    case CustomRouteType.Guest: {\n      return (\n        <Route { ...props }>\n          { authorizationStatus  === AuthorizationStatus.NotAuth ? props.children : <Redirect to={AppRoute.Root()} />}\n        </Route>\n      );\n    }\n  }\n}\n\nexport default CustomRoute;\n","import { useSelector } from 'react-redux';\nimport MainScreen from '../main-screen/main-screen';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport FilmScreen from '../film-screen/film-screen';\nimport PlayerScreen from '../player-screen/player-screen';\nimport LoginScreen from '../login-screen/login-screen';\nimport MyListScreen from '../my-list-screen/my-list-screen';\nimport AddReviewScreen from '../add-review-screen/add-review-screen';\nimport NotFoundScreen from '../not-found-screen/not-found-screen';\nimport { AppRoute, CustomRouteType, AuthorizationStatus} from '../../constants';\nimport CustomRoute from '../custom-route/custom-route';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport { getAuthorizationStatus } from '../../store/authorization/authorization-selectors';\n\nfunction App(): JSX.Element {\n  const authorizationStatus = useSelector(getAuthorizationStatus);\n  if (authorizationStatus === AuthorizationStatus.Unknown) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <Switch>\n      <Route path={AppRoute.Root()} exact>\n        <MainScreen />\n      </Route>\n      <Route path={AppRoute.Film()} exact>\n        <FilmScreen />\n      </Route>\n      <Route path={AppRoute.Player()} exact>\n        <PlayerScreen />\n      </Route>\n      <CustomRoute path={AppRoute.Login()} exact type={CustomRouteType.Guest}>\n        <LoginScreen />\n      </CustomRoute>\n      <CustomRoute path={AppRoute.MyList()} exact type={CustomRouteType.Private}>\n        <MyListScreen />\n      </CustomRoute>\n      <CustomRoute path={AppRoute.AddReview()} exact type={CustomRouteType.Private}>\n        <AddReviewScreen />\n      </CustomRoute>\n      <Route path={AppRoute.NotFound()} exact>\n        <NotFoundScreen />\n      </Route>\n      <Route>\n        <Redirect to={AppRoute.NotFound()} />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { createBrowserHistory } from 'history';\n\nconst browserHistory = createBrowserHistory();\n\nexport default browserHistory;\n","import browserHistory from '../../browser-history';\nimport { Middleware } from '@reduxjs/toolkit';\nimport { State } from '../../types/types';\nimport { ActionType } from '../../constants';\n\nconst redirect: Middleware<unknown, State> =\n  (_store) =>\n    (next) =>\n      (action) => {\n\n        if (action.type === ActionType.Redirect) {\n          browserHistory.push(action.payload.route);\n        }\n\n        return next(action);\n      };\n\nexport { redirect };\n","import { FetchStatus } from '../../constants';\nimport { FetchedData, Film } from '../../types/types';\n\ntype FilmsState = {\n  allFilms: FetchedData<Film[]>,\n  promoFilm: FetchedData<Film>,\n  currentFilm: FetchedData<Film>,\n  similarFilms: FetchedData<Film[]>,\n  favoriteFilms: FetchedData<Film[]>,\n};\n\nconst filmsInitialState: FilmsState = {\n  allFilms: {\n    data: null,\n    status: FetchStatus.Idle,\n  },\n  promoFilm: {\n    data: null,\n    status: FetchStatus.Idle,\n  },\n  currentFilm: {\n    data: null,\n    status: FetchStatus.Idle,\n  },\n  similarFilms: {\n    data: null,\n    status: FetchStatus.Idle,\n  },\n  favoriteFilms: {\n    data: null,\n    status: FetchStatus.Idle,\n  },\n};\n\nexport type { FilmsState };\nexport {filmsInitialState};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { setAllFilms, setAllFilmsFetchStatus, setCurrentFilm, setCurrentFilmFetchStatus, setFavoriteFilms, setFavoriteFilmsFetchStatus, setPromoFilmFetchStatus, setPromoFilm, setSimilarFilms, setSimilarFilmsFetchStatus } from './films-actions';\nimport { filmsInitialState } from './films-initial-state';\n\nconst filmsReducer = createReducer(filmsInitialState, (builder) => {\n  builder\n    .addCase(setAllFilms, (state, action) => {\n      state.allFilms.data = action.payload.allFilms;\n    })\n    .addCase(setAllFilmsFetchStatus, (state, action) => {\n      state.allFilms.status = action.payload.status;\n    })\n    .addCase(setPromoFilm, (state, action) => {\n      state.promoFilm.data = action.payload.promoFilm;\n    })\n    .addCase(setPromoFilmFetchStatus, (state, action) => {\n      state.promoFilm.status = action.payload.status;\n    })\n    .addCase(setFavoriteFilms, (state, action) => {\n      state.favoriteFilms.data = action.payload.favoriteFilms;\n    })\n    .addCase(setFavoriteFilmsFetchStatus, (state, action) => {\n      state.favoriteFilms.status = action.payload.status;\n    })\n    .addCase(setSimilarFilms, (state, action) => {\n      state.similarFilms.data = action.payload.similarFilms;\n    })\n    .addCase(setSimilarFilmsFetchStatus, (state, action) => {\n      state.similarFilms.status = action.payload.status;\n    })\n    .addCase(setCurrentFilm, (state, action) => {\n      state.currentFilm.data = action.payload.currentFilm;\n    })\n    .addCase(setCurrentFilmFetchStatus, (state, action) => {\n      state.currentFilm.status = action.payload.status;\n    });\n});\n\nexport {filmsReducer};\n","import { AuthorizationStatus } from '../../constants';\nimport { AuthorizationInfo, ValuesOf } from '../../types/types';\n\ntype AuthorizationState = {\n  status:  ValuesOf<typeof AuthorizationStatus>,\n  info: AuthorizationInfo | null,\n  errorMessage: string,\n}\n\nconst authorizationInitialState: AuthorizationState = {\n  status: AuthorizationStatus.Unknown,\n  info: null,\n  errorMessage: '',\n};\n\nexport {authorizationInitialState};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { setAuthorizationErrorMessage, setAuthorizationInfo, setAuthorizationStatus } from './authorization-actions';\nimport { authorizationInitialState } from './authorization-initial-state';\n\nconst authorizationReducer = createReducer(authorizationInitialState, (build) => {\n  build\n    .addCase(setAuthorizationInfo, (state, action) => {\n      state.info = action.payload.info;\n    })\n    .addCase(setAuthorizationStatus, (state, action) => {\n      state.status = action.payload.status;\n    })\n    .addCase(setAuthorizationErrorMessage, (state, action) => {\n      state.errorMessage = action.payload.errorMessage;\n    });\n});\n\nexport { authorizationReducer };\n","import { FetchStatus } from '../../constants';\nimport { FetchedData, Comment, FetchStatusType } from '../../types/types';\n\ntype CommentsState = {\n  currentComments: FetchedData<Comment[]>,\n  newComment: {\n    status: FetchStatusType,\n  },\n};\n\nconst commentsInitialState: CommentsState = {\n  currentComments: {\n    data: null,\n    status: FetchStatus.Idle,\n  },\n  newComment: {\n    status: FetchStatus.Idle,\n  },\n};\n\nexport type { CommentsState };\nexport { commentsInitialState };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { setCurrentComments, setCurrentCommentsFetchStatus, setNewCommentFetchStatus } from './comments-actions';\nimport { commentsInitialState } from './comments-initial-state';\n\nconst commentsReducer = createReducer(commentsInitialState, (build) => {\n  build\n    .addCase(setCurrentComments, (state, action) => {\n      state.currentComments.data = action.payload.currentComments;\n    })\n    .addCase(setCurrentCommentsFetchStatus, (state, action) => {\n      state.currentComments.status = action.payload.status;\n    })\n    .addCase(setNewCommentFetchStatus, (state, action) => {\n      state.newComment.status = action.payload.status;\n    });\n});\n\nexport {commentsReducer};\n","import { ALL_GENRES } from '../../constants';\n\ntype filterState = string;\n\nconst filterInitialState: filterState = ALL_GENRES;\n\nexport {filterInitialState};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { setFilter } from './filter-actions';\nimport { filterInitialState } from './filter-initial-state';\n\nconst filterReducer = createReducer(filterInitialState, (build) => {\n  build\n    .addCase(setFilter, (state, action) => action.payload.filter);\n});\n\nexport {filterReducer};\n","import { combineReducers } from 'redux';\nimport { filmsReducer } from './films/films-reducer';\nimport { authorizationReducer } from './authorization/authorization-reducer';\nimport { commentsReducer } from './comments/comments-reducer';\nimport { filterReducer } from './filter/filter-reducer';\n\nconst rootReducer = combineReducers({\n  films: filmsReducer,\n  comments: commentsReducer,\n  filter: filterReducer,\n  authorization: authorizationReducer,\n});\n\nexport {rootReducer};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport { Provider } from 'react-redux';\nimport { Router as BrowserRouter } from 'react-router-dom';\nimport browserHistory from './browser-history';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { AuthorizationStatus } from './constants';\nimport { createAPI } from './services/api';\nimport { setAuthorizationStatus } from './store/authorization/authorization-actions';\nimport { Toaster } from 'react-hot-toast';\nimport { redirect } from './store/middleware/redirect';\nimport { rootReducer } from './store/root-reducer';\nimport { getLogin } from './store/authorization/authorization-api-actions';\n\nconst api = createAPI(() => {\n  store.dispatch(setAuthorizationStatus(AuthorizationStatus.NotAuth));\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n      thunk: {\n        extraArgument: api,\n      },\n    }).concat(redirect),\n});\n\nstore.dispatch(getLogin());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter history={browserHistory}>\n        <App />\n      </BrowserRouter>\n      <Toaster position=\"top-right\" />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'));\n","import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError} from 'axios';\nimport { getToken } from './token';\n\nconst BACKEND_URL = 'https://8.react.pages.academy/wtw';\nconst REQUEST_TIMEOUT = 5000;\n\nconst UNAUTHORIZED_HTTP_STATUS = 401;\n\ntype UnauthorizedCallback = () => void;\n\nconst createAPI = (unauthorizedCallback?: UnauthorizedCallback): AxiosInstance => {\n  const api = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT,\n  });\n\n  api.interceptors.response.use(\n    (response: AxiosResponse) => response,\n\n    (error: AxiosError) => {\n      const {response} = error;\n\n      if (response?.status === UNAUTHORIZED_HTTP_STATUS) {\n        if (typeof unauthorizedCallback === 'function') {\n          unauthorizedCallback();\n        }\n      }\n\n      return Promise.reject(error);\n    },\n  );\n\n  api.interceptors.request.use(\n    (config: AxiosRequestConfig) => {\n      const token = getToken();\n\n      if (token) {\n        config.headers['x-token'] = token;\n      }\n\n      return config;\n    },\n  );\n\n  return api;\n};\n\nexport { createAPI };\n"],"sourceRoot":""}